from datetime import datetime
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload, joinedload

from common.database import async_session_maker, Booking, BookingStatus, Tutor
from parent_bot.main import bot as parent_bot

class BookingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏"""
    waiting_for_rejection_reason = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏

async def show_pending_bookings(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    async with async_session_maker() as session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        tutor = await session.execute(
            select(Tutor).where(Tutor.telegram_id == callback_query.from_user.id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            print(f"Tutor not found. Telegram ID: {callback_query.from_user.id}")
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return

        print(f"Found tutor: ID={tutor.id}, telegram_id={tutor.telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        pending_bookings = await session.execute(
            select(Booking)
            .where(
                and_(
                    Booking.tutor_id == tutor.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    Booking.status == BookingStatus.PENDING
                )
            )
            .order_by(Booking.date, Booking.start_time)
            .options(
                joinedload(Booking.child),
                joinedload(Booking.parent)
            )
        )
        pending_bookings = pending_bookings.scalars().all()
        
        print(f"Found {len(pending_bookings)} pending bookings")

        if not pending_bookings:
            await callback_query.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
        booking = pending_bookings[0]
        total_count = len(pending_bookings)
        
        text = (
            f"üìã –ó–∞–ø–∏—Å–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({1}/{total_count})\n\n"
            f"üìö {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å: {booking.parent.name} {booking.parent.surname}\n"
            f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ"
        )

        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"approve_booking_{booking.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_booking_{booking.id}"
                )
            ]
        ]

        if total_count > 1:
            keyboard.append([
                InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∑–∞–ø–∏—Å—å",
                    callback_data=f"next_pending_booking_1"
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")
        ])

        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

async def show_next_pending_booking(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞–ø–∏—Å—å, –æ–∂–∏–¥–∞—é—â—É—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    current_index = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        tutor = await session.execute(
            select(Tutor).where(Tutor.telegram_id == callback_query.from_user.id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return

        pending_bookings = await session.execute(
            select(Booking)
            .where(
                and_(
                    Booking.tutor_id == tutor.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    Booking.status == BookingStatus.PENDING
                )
            )
            .order_by(Booking.date, Booking.start_time)
            .options(
                joinedload(Booking.child),
                joinedload(Booking.parent)
            )
        )
        pending_bookings = pending_bookings.scalars().all()
        total_count = len(pending_bookings)

        if current_index >= total_count:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            current_index = 0

        booking = pending_bookings[current_index]
        
        text = (
            f"üìã –ó–∞–ø–∏—Å–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ({current_index + 1}/{total_count})\n\n"
            f"üìö {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–æ–¥–∏—Ç–µ–ª—å: {booking.parent.name} {booking.parent.surname}\n"
            f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ"
        )

        keyboard = [
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                    callback_data=f"approve_booking_{booking.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    callback_data=f"reject_booking_{booking.id}"
                )
            ]
        ]

        if total_count > 1:
            keyboard.append([
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                    callback_data=f"next_pending_booking_{(current_index - 1) % total_count}"
                ),
                InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                    callback_data=f"next_pending_booking_{(current_index + 1) % total_count}"
                )
            ])

        keyboard.append([
            InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")
        ])

        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

async def approve_booking(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"""
    booking_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
            tutor = await session.execute(
                select(Tutor).where(Tutor.telegram_id == callback_query.from_user.id)
            )
            tutor = tutor.scalar_one_or_none()
            
            if not tutor:
                await callback_query.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
            booking = await session.execute(
                select(Booking)
                .options(
                    selectinload(Booking.child),
                    selectinload(Booking.parent)
                )
                .where(
                    Booking.id == booking_id,
                    Booking.status == BookingStatus.PENDING
                )
            )
            booking = booking.scalar_one_or_none()
            
            if not booking:
                await callback_query.message.edit_text(
                    "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="tutor_pending_bookings")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
            if booking.tutor_id != tutor.id:
                await callback_query.message.edit_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            booking.status = BookingStatus.APPROVED
            booking.approved_at = datetime.utcnow()
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            notification_text = (
                "‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–ø–∏—Å—å!\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
                f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name}\n"
                f"üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n"
                f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ"
            )
            
            await parent_bot.send_message(
                chat_id=booking.parent.telegram_id,
                text=notification_text
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
            await callback_query.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="tutor_pending_bookings")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            
        except Exception as e:
            print(f"Error approving booking: {str(e)}")
            await callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )

async def reject_booking(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    booking_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        tutor = await session.execute(
            select(Tutor).where(Tutor.telegram_id == callback_query.from_user.id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        booking = await session.execute(
            select(Booking)
            .options(
                selectinload(Booking.child),
                selectinload(Booking.parent)
            )
            .where(
                Booking.id == booking_id,
                Booking.status == BookingStatus.PENDING
            )
        )
        booking = booking.scalar_one_or_none()
        
        if not booking:
            await callback_query.message.edit_text(
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="tutor_pending_bookings")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        if booking.tutor_id != tutor.id:
            await callback_query.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(BookingStates.waiting_for_rejection_reason)
        await state.update_data(booking_id=booking_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        await callback_query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –Ø –∑–∞–Ω—è—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è\n"
            "- –£ –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è\n"
            "- –Ø –Ω–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ –≤—Ä–µ–º—è\n"
            "- –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞\n\n"
            "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_rejection")]
            ])
        )

async def process_rejection_reason(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    state_data = await state.get_data()
    booking_id = state_data.get('booking_id')
    
    if not booking_id:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        await state.clear()
        return
    
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
            booking = await session.execute(
                select(Booking)
                .options(
                    selectinload(Booking.child),
                    selectinload(Booking.parent),
                    selectinload(Booking.tutor)
                )
                .where(
                    Booking.id == booking_id,
                    Booking.status == BookingStatus.PENDING
                )
            )
            booking = booking.scalar_one_or_none()
            
            if not booking:
                await message.answer(
                    "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="tutor_pending_bookings")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                await state.clear()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            booking.status = BookingStatus.REJECTED
            booking.rejection_reason = message.text
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            notification_text = (
                "‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø–∏—Å—å\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
                f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {booking.tutor.name} {booking.tutor.surname}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name}\n"
                f"üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n"
                f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                f"‚ùóÔ∏è –ü—Ä–∏—á–∏–Ω–∞: {booking.rejection_reason}"
            )
            
            await parent_bot.send_message(
                chat_id=booking.parent.telegram_id,
                text=notification_text
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await message.answer(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="tutor_pending_bookings")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            
        except Exception as e:
            print(f"Error rejecting booking: {str(e)}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        
        finally:
            await state.clear()

async def cancel_rejection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    await state.clear()
    await callback_query.message.edit_text(
        "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="tutor_pending_bookings")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

def register_booking_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏"""
    dp.callback_query.register(show_pending_bookings, lambda c: c.data == "tutor_pending_bookings")
    dp.callback_query.register(show_next_pending_booking, lambda c: c.data.startswith("next_pending_booking_"))
    dp.callback_query.register(approve_booking, lambda c: c.data.startswith("approve_booking_"))
    dp.callback_query.register(reject_booking, lambda c: c.data.startswith("reject_booking_"))
    dp.callback_query.register(cancel_rejection, lambda c: c.data == "cancel_rejection", BookingStates.waiting_for_rejection_reason)
    dp.message.register(process_rejection_reason, BookingStates.waiting_for_rejection_reason) 