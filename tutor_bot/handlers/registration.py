from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from common.database import Tutor, get_session
from tutor_bot.keyboards import (
    get_registration_form_keyboard,
    get_subjects_keyboard,
    get_schedule_table,
    get_hour_keyboard,
    get_minute_keyboard,
    DAY_NAMES,
    get_registration_prices_keyboard,
    get_registration_description_keyboard
)

from tutor_bot.handlers.profile import show_profile

class TutorRegistration(StatesGroup):
    waiting_for_name_surname = State()
    waiting_for_name_input = State()
    waiting_for_surname_input = State()
    waiting_for_patronymic_input = State()
    waiting_for_subjects = State()
    waiting_for_description = State()
    waiting_for_schedule_table = State()
    waiting_for_time_hour = State()
    waiting_for_time_minute = State()
    setting_prices = State()
    waiting_for_price_input = State()

async def process_start_registration(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard()
    )
    await state.set_state(TutorRegistration.waiting_for_name_surname)

async def process_edit_name(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == TutorRegistration.waiting_for_name_surname.state:
        await callback_query.message.edit_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(TutorRegistration.waiting_for_name_input)

async def process_edit_surname(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == TutorRegistration.waiting_for_name_surname.state:
        await callback_query.message.edit_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?")
        await state.set_state(TutorRegistration.waiting_for_surname_input)

async def process_edit_patronymic(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == TutorRegistration.waiting_for_name_surname.state:
        await callback_query.message.edit_text(
            "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –æ—Ç—á–µ—Å—Ç–≤–æ? (–ï—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞", callback_data="skip_patronymic")]
            ])
        )
        await state.set_state(TutorRegistration.waiting_for_patronymic_input)

async def process_name_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(name=message.text)
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(name=message.text, surname=data.get("surname", ""))
    )
    await state.set_state(TutorRegistration.waiting_for_name_surname)

async def process_surname_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(surname=message.text)
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(name=data.get("name", ""), surname=message.text)
    )
    await state.set_state(TutorRegistration.waiting_for_name_surname)

async def process_patronymic_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(patronymic=message.text)
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(
            name=data.get("name", ""),
            surname=data.get("surname", ""),
            patronymic=message.text
        )
    )
    await state.set_state(TutorRegistration.waiting_for_name_surname)

async def process_finish_name_surname(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("name") or not data.get("surname"):
        await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é!")
        return
    
    await callback_query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–µ–ø–æ–¥–∞–µ—Ç–µ:",
        reply_markup=get_subjects_keyboard([])
    )
    await state.set_state(TutorRegistration.waiting_for_subjects)

async def process_subject_selection(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state != TutorRegistration.waiting_for_subjects.state:
        return
    
    callback_data = callback_query.data
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    if callback_data.startswith("subject_name_"):
        return
        
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
    if not callback_data.startswith("subject_"):
        return
        
    # subject_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_exam –∏–ª–∏ subject_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_standard
    _, subject, type_str = callback_data.split("_", 2)
    is_exam = type_str == "exam"
    
    data = await state.get_data()
    subjects = data.get("subjects", [])
    
    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
    subject_data = next(
        (s for s in subjects if s["name"] == subject),
        {"name": subject, "is_exam": False, "is_standard": False}
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–ª–∞–≥
    if is_exam:
        subject_data["is_exam"] = not subject_data["is_exam"]
    else:
        subject_data["is_standard"] = not subject_data["is_standard"]
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º
    if subject_data not in subjects:
        subjects.append(subject_data)
    # –ï—Å–ª–∏ –æ–±–∞ —Ñ–ª–∞–≥–∞ False, —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    elif not subject_data["is_exam"] and not subject_data["is_standard"]:
        subjects.remove(subject_data)
    
    await state.update_data(subjects=subjects)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π:",
        reply_markup=get_subjects_keyboard(subjects)
    )

async def process_finish_subjects(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    subjects = data.get("subjects", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–∞–Ω —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º —Ç–∏–ø–æ–º
    if not any(s["is_exam"] or s["is_standard"] for s in subjects):
        await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏–π!")
        return
    
    await callback_query.message.edit_text(
        "üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏–π:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–µ–Ω—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë",
        reply_markup=get_registration_prices_keyboard(subjects)
    )
    await state.set_state(TutorRegistration.setting_prices)

async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    schedule = {day_code: {"active": False, "start": "", "end": ""} for day_code in DAY_NAMES.keys()}
    await state.update_data(schedule=schedule)
    await message.answer(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–í—ã–±–µ—Ä–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –∑–∞–¥–∞–π –Ω–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=get_schedule_table(schedule)
    )
    await state.set_state(TutorRegistration.waiting_for_schedule_table)

async def toggle_day_status(callback_query: types.CallbackQuery, state: FSMContext):
    day_code = callback_query.data.replace("toggle_", "")
    data = await state.get_data()
    schedule = data.get("schedule", {})
    schedule[day_code]["active"] = not schedule[day_code]["active"]
    if not schedule[day_code]["active"]:
        schedule[day_code]["start"] = ""
        schedule[day_code]["end"] = ""
    await state.update_data(schedule=schedule)
    await callback_query.message.edit_reply_markup(reply_markup=get_schedule_table(schedule))

async def process_hour(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split("_")
    time_type = parts[1]  # start –∏–ª–∏ end
    day_code = parts[3]
    hour = int(parts[4])
    data = await state.get_data()
    schedule = data.get("schedule", {})
    if day_code not in schedule:
        schedule[day_code] = {"active": True, "start": "", "end": ""}
    await state.update_data(schedule=schedule, selected_hour=hour)
    
    time_text = "–Ω–∞—á–∞–ª–∞" if time_type == "start" else "–æ–∫–æ–Ω—á–∞–Ω–∏—è"
    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏ –º–∏–Ω—É—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {time_text} —Ä–∞–±–æ—Ç—ã –≤ {DAY_NAMES.get(day_code, day_code)}:",
        reply_markup=get_minute_keyboard(day_code, time_type, hour)
    )
    await state.set_state(TutorRegistration.waiting_for_time_minute)

async def process_minute(callback_query: types.CallbackQuery, state: FSMContext):
    parts = callback_query.data.split("_")
    time_type = parts[1]  # start –∏–ª–∏ end
    day_code = parts[3]
    hour = int(parts[4])
    minute = int(parts[5])
    data = await state.get_data()
    schedule = data.get("schedule", {})
    if day_code not in schedule:
        schedule[day_code] = {"active": True, "start": "", "end": ""}
    time_str = f"{hour:02d}:{minute:02d}"
    schedule[day_code][time_type] = time_str
    schedule[day_code]["active"] = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if time_type == "end" and schedule[day_code]["start"] and time_str <= schedule[day_code]["start"]:
        await callback_query.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!")
        return
    elif time_type == "start" and schedule[day_code]["end"] and time_str >= schedule[day_code]["end"]:
        await callback_query.answer("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è!")
        return
    
    await state.update_data(schedule=schedule)
    await callback_query.message.edit_text(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–í—ã–±–µ—Ä–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –∑–∞–¥–∞–π –Ω–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=get_schedule_table(schedule)
    )
    await state.set_state(TutorRegistration.waiting_for_schedule_table)

async def set_start_time(callback_query: types.CallbackQuery, state: FSMContext):
    day_code = callback_query.data.replace("set_start_", "")
    await state.update_data(current_day=day_code, current_time_type="start")
    await callback_query.message.edit_text(
        f"–í –∫–æ—Ç–æ—Ä–æ–º —á–∞—Å—É —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Ä–∞–±–æ—Ç—É –≤ {DAY_NAMES.get(day_code, day_code)}? –í—ã–±–µ—Ä–∏ —á–∞—Å—ã, –∑–∞—Ç–µ–º —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω—É—Ç—ã.",
        reply_markup=get_hour_keyboard(day_code, "start")
    )
    await state.set_state(TutorRegistration.waiting_for_time_hour)

async def set_end_time(callback_query: types.CallbackQuery, state: FSMContext):
    day_code = callback_query.data.replace("set_end_", "")
    await state.update_data(current_day=day_code, current_time_type="end")
    await callback_query.message.edit_text(
        f"–í –∫–æ—Ç–æ—Ä–æ–º —á–∞—Å—É —Ç—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—à—å —Ä–∞–±–æ—Ç—É –≤ {DAY_NAMES.get(day_code, day_code)}? –í—ã–±–µ—Ä–∏ —á–∞—Å—ã, –∑–∞—Ç–µ–º —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω—É—Ç—ã.",
        reply_markup=get_hour_keyboard(day_code, "end")
    )
    await state.set_state(TutorRegistration.waiting_for_time_hour)

async def back_to_schedule(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    schedule = data.get("schedule", {})
    await callback_query.message.edit_text(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n–í—ã–±–µ—Ä–∏ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –∏ –∑–∞–¥–∞–π –Ω–∞—á–∞–ª–æ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=get_schedule_table(schedule)
    )
    await state.set_state(TutorRegistration.waiting_for_schedule_table)

async def save_schedule(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    schedule = data.get("schedule", {})
    # –í–∞–ª–∏–¥–∞—Ü–∏—è: –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π start –∏ end –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –∏ end > start
    for day_code, info in schedule.items():
        if info["active"]:
            if not info["start"] or not info["end"]:
                await callback_query.answer(f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {DAY_NAMES.get(day_code, day_code)}")
                return
            if info["end"] <= info["start"]:
                await callback_query.answer(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞ –¥–ª—è {DAY_NAMES.get(day_code, day_code)}")
                return
    
    async for session in get_session():
        tutor = Tutor(
            telegram_id=callback_query.from_user.id,
            name=data["name"],
            surname=data["surname"],
            patronymic=data.get("patronymic"),
            subjects=data["subjects"],
            schedule=schedule,
            description=data["description"]
        )
        session.add(tutor)
        await session.commit()
    
    await callback_query.message.edit_text(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
    )
    await state.clear()
    await show_profile(callback_query)

async def process_registration_price_edit(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state != TutorRegistration.setting_prices.state:
        return
        
    # registration_price_edit_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_exam –∏–ª–∏ registration_price_edit_–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_standard
    _, _, _, subject, price_type = callback_query.data.split("_", 4)
    
    await state.update_data(
        current_subject=subject,
        current_price_type=price_type
    )
    
    await callback_query.message.edit_text(
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è {subject} ({'–û–ì–≠/–ï–ì–≠' if price_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç'}):\n"
        "–¶–µ–Ω–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä—É–±–ª—è—Ö –∑–∞ —á–∞—Å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="registration_price_cancel_edit")]
        ])
    )
    await state.set_state(TutorRegistration.waiting_for_price_input)

async def process_registration_price_input(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != TutorRegistration.waiting_for_price_input.state:
        return
        
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="registration_price_cancel_edit")]
            ])
        )
        return
    
    data = await state.get_data()
    subjects = data.get("subjects", [])
    subject = data.get("current_subject")
    price_type = data.get("current_price_type")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    for subject_data in subjects:
        if subject_data["name"] == subject:
            if price_type == "exam":
                subject_data["exam_price"] = price
            else:
                subject_data["standard_price"] = price
            break
    
    await state.update_data(subjects=subjects)
    await state.set_state(TutorRegistration.setting_prices)
    await message.answer(
        "üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏–π:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–µ–Ω—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë",
        reply_markup=get_registration_prices_keyboard(subjects)
    )

async def cancel_registration_price_edit(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state != TutorRegistration.waiting_for_price_input.state:
        return
        
    data = await state.get_data()
    subjects = data.get("subjects", [])
    await state.set_state(TutorRegistration.setting_prices)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–Ω
    await callback_query.message.edit_text(
        "üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏–π:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–µ–Ω—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë",
        reply_markup=get_registration_prices_keyboard(subjects)
    )

async def back_to_subjects(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    subjects = data.get("subjects", [])
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π:",
        reply_markup=get_subjects_keyboard(subjects)
    )
    await state.set_state(TutorRegistration.waiting_for_subjects)

async def save_registration_prices(callback_query: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state != TutorRegistration.setting_prices.state:
        return
        
    data = await state.get_data()
    subjects = data.get("subjects", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π –∏–º–µ—é—Ç —Ü–µ–Ω—ã
    for subject in subjects:
        if subject["is_exam"] and not subject.get("exam_price"):
            await callback_query.answer(f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –û–ì–≠/–ï–ì–≠ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject['name']}")
            return
        if subject["is_standard"] and not subject.get("standard_price"):
            await callback_query.answer(f"‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –°—Ç–∞–Ω–¥–∞—Ä—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject['name']}")
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await callback_query.message.edit_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ, —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è –∏ –º–µ—Ç–æ–¥–∏–∫–µ –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=get_registration_description_keyboard()
    )
    await state.set_state(TutorRegistration.waiting_for_description)

async def back_to_prices(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    subjects = data.get("subjects", [])
    await callback_query.message.edit_text(
        "üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏–π:\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–µ–Ω—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ—ë",
        reply_markup=get_registration_prices_keyboard(subjects)
    )
    await state.set_state(TutorRegistration.setting_prices)

async def skip_patronymic(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.edit_text(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(
            name=data.get("name", ""),
            surname=data.get("surname", ""),
            patronymic=""
        )
    )
    await state.set_state(TutorRegistration.waiting_for_name_surname)

def register_registration_handlers(dp):
    dp.callback_query.register(process_start_registration, lambda c: c.data == "start_registration")
    dp.callback_query.register(process_edit_name, lambda c: c.data == "edit_name")
    dp.callback_query.register(process_edit_surname, lambda c: c.data == "edit_surname")
    dp.callback_query.register(process_edit_patronymic, lambda c: c.data == "edit_patronymic")
    dp.message.register(process_name_input, TutorRegistration.waiting_for_name_input)
    dp.message.register(process_surname_input, TutorRegistration.waiting_for_surname_input)
    dp.callback_query.register(process_finish_name_surname, lambda c: c.data == "finish_name_surname")
    dp.callback_query.register(process_subject_selection, lambda c: c.data.startswith("subject_"))
    dp.callback_query.register(process_finish_subjects, lambda c: c.data == "registration_finish_subjects")
    dp.message.register(process_description, TutorRegistration.waiting_for_description)
    dp.callback_query.register(toggle_day_status, lambda c: c.data.startswith("toggle_"))
    dp.callback_query.register(process_hour, lambda c: c.data.startswith("set_start_hour_") or c.data.startswith("set_end_hour_"))
    dp.callback_query.register(process_minute, lambda c: c.data.startswith("set_start_minute_") or c.data.startswith("set_end_minute_"))
    dp.callback_query.register(set_start_time, lambda c: c.data.startswith("set_start_"))
    dp.callback_query.register(set_end_time, lambda c: c.data.startswith("set_end_"))
    dp.callback_query.register(back_to_schedule, lambda c: c.data == "back_to_schedule")
    dp.callback_query.register(save_schedule, lambda c: c.data == "save_schedule")
    dp.callback_query.register(process_registration_price_edit, lambda c: c.data.startswith("registration_price_edit_"))
    dp.callback_query.register(cancel_registration_price_edit, lambda c: c.data == "registration_price_cancel_edit")
    dp.message.register(process_registration_price_input, TutorRegistration.waiting_for_price_input)
    dp.callback_query.register(save_registration_prices, lambda c: c.data == "registration_price_save")
    dp.callback_query.register(back_to_subjects, lambda c: c.data == "registration_price_back")
    dp.callback_query.register(back_to_prices, lambda c: c.data == "registration_description_back")
    dp.message.register(process_patronymic_input, TutorRegistration.waiting_for_patronymic_input)
    dp.callback_query.register(skip_patronymic, lambda c: c.data == "skip_patronymic") 