from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tutor_bot.handlers.profile import back_to_main_menu

from common.database import Booking, BookingStatus, async_session_maker
from tutor_bot.schedule_kb import (
    get_schedule_filters_kb,
    get_schedule_entry_kb,
    get_cancel_confirmation_kb
)
from tutor_bot.utils.schedule_utils import (
    get_bookings_for_period,
    format_daily_schedule,
    format_weekly_schedule,
    format_monthly_schedule,
    format_date_with_month,
    format_month_title
)

async def show_schedule(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    period = 'today'  # today, tomorrow, week –∏–ª–∏ month
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        bookings = await get_bookings_for_period(
            session,
            callback_query.from_user.id,
            period
        )
        
        now = datetime.now()
        date_str = format_date_with_month(now.date())
        text = format_daily_schedule(bookings, date_str)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            text,
            reply_markup=get_schedule_filters_kb()
        )

async def handle_schedule_filter(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    period = callback.data.split(":")[1]
    
    async with async_session_maker() as session:
        bookings = await get_bookings_for_period(session, callback.from_user.id, period)
        print('DEBUG:bookings', bookings)
        now = datetime.now()
        if period == "today":
            date_str = format_date_with_month(now.date())
            text = format_daily_schedule(bookings, date_str)
        elif period == "tomorrow":
            tomorrow = (datetime.now() + timedelta(days=1)).date()
            date_str = format_date_with_month(tomorrow)
            text = format_daily_schedule(bookings, date_str)
        elif period == "week":
            start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).date()
            end_date = (start_date + timedelta(days=6))
            week_range = f"{format_date_with_month(start_date)}-{format_date_with_month(end_date)}"
            text = format_weekly_schedule(bookings, week_range)
        elif period == "month":
            month_str = format_month_title(now.date())
            text = format_monthly_schedule(bookings, month_str)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_schedule_filters_kb()
        )
        await callback.answer()

async def handle_cancel_booking(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è"""
    booking_id = int(callback.data.split(":")[2])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        booking = await session.get(Booking, booking_id)
        if not booking:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
        if booking.status != BookingStatus.APPROVED:
            await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = (
            "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å:\n"
            f"‚è∞ {booking.start_time.strftime('%H:%M')}-{booking.end_time.strftime('%H:%M')}, "
            f"{booking.date.strftime('%d.%m.%Y')}\n"
            f"üë§ {booking.child.name} {booking.child.surname} ({booking.child.grade} –∫–ª–∞—Å—Å)\n"
            f"üìö {booking.subject_name} ({booking.lesson_type})\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_cancel_confirmation_kb(booking_id)
        )
        await callback.answer()

async def handle_confirm_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è"""
    booking_id = int(callback.data.split(":")[2])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        booking = await session.get(Booking, booking_id)
        if not booking:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–ø–∏—Å—å –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
        booking.status = BookingStatus.CANCELLED
        booking.cancelled_at = datetime.utcnow()
        await session.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        bookings = await get_bookings_for_period(session, callback.from_user.id, "today")
        today_str = datetime.now().strftime("%d.%m.%Y")
        
        await callback.message.edit_text(
            format_daily_schedule(bookings, today_str),
            reply_markup=get_schedule_filters_kb()
        )
        await callback.answer("‚úÖ –ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")

async def handle_schedule_back(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    async with async_session_maker() as session:
        bookings = await get_bookings_for_period(session, callback.from_user.id, "today")
        today_str = datetime.now().strftime("%d.%m.%Y")
        
        await callback.message.edit_text(
            format_daily_schedule(bookings, today_str),
            reply_markup=get_schedule_filters_kb()
        )
        await callback.answer()

def register_schedule_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    dp.callback_query.register(show_schedule, lambda c: c.data == "show_schedule")
    dp.callback_query.register(handle_schedule_filter, lambda c: c.data.startswith("schedule:") and not c.data.startswith("schedule:cancel"))
    dp.callback_query.register(handle_cancel_booking, lambda c: c.data.startswith("schedule:cancel:"))
    dp.callback_query.register(handle_confirm_cancel, lambda c: c.data.startswith("schedule:confirm_cancel:"))
    dp.callback_query.register(handle_schedule_back, lambda c: c.data == "schedule:back")
    dp.callback_query.register(back_to_main_menu, lambda c: c.data == "back_to_main")