from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from tutor_bot.handlers.profile import back_to_main_menu

from common.database import Booking, BookingStatus, async_session_maker, Tutor, Parent
from tutor_bot.schedule_kb import (
    get_schedule_filters_kb,
    get_schedule_with_cancel_kb,
    get_cancel_confirmation_kb
)
from tutor_bot.utils.schedule_utils import (
    get_bookings_for_period,
    format_daily_schedule,
    format_weekly_schedule,
    format_monthly_schedule,
    format_date_with_month,
    format_month_title
)
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from parent_bot.main import bot as parent_bot

def get_period_title(period: str, date: datetime = None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
    if not date:
        date = datetime.now()
    
    if period == "today":
        return "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "tomorrow":
        return "–∑–∞–≤—Ç—Ä–∞"
    elif period == "week":
        start = date - timedelta(days=date.weekday())
        end = start + timedelta(days=6)
        return f"–Ω–µ–¥–µ–ª—é ({format_date_with_month(start.date())}-{format_date_with_month(end.date())})"
    else:  # month
        return f"–º–µ—Å—è—Ü ({format_month_title(date.date())})"

async def show_schedule(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    period = callback_query.data.split(':')[1] if ':' in callback_query.data else 'today'
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        bookings = await get_bookings_for_period(
            session,
            callback_query.from_user.id,
            period
        )
        
        now = datetime.now()
        if period == "today":
            date_str = format_date_with_month(now.date())
            text = format_daily_schedule(bookings, date_str)
        elif period == "tomorrow":
            tomorrow = (now + timedelta(days=1)).date()
            date_str = format_date_with_month(tomorrow)
            text = format_daily_schedule(bookings, date_str)
        elif period == "week":
            start_date = (now - timedelta(days=now.weekday())).date()
            end_date = (start_date + timedelta(days=6))
            week_range = f"{format_date_with_month(start_date)}-{format_date_with_month(end_date)}"
            text = format_weekly_schedule(bookings, week_range)
        else:  # month
            month_str = format_month_title(now.date())
            text = format_monthly_schedule(bookings, month_str)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_text(
            text,
            reply_markup=get_schedule_filters_kb(bookings, period)
        )

async def handle_schedule_filter(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    period = callback.data.split(":")[1]
    
    async with async_session_maker() as session:
        bookings = await get_bookings_for_period(session, callback.from_user.id, period)
        
        now = datetime.now()
        if period == "today":
            date_str = format_date_with_month(now.date())
            text = format_daily_schedule(bookings, date_str)
        elif period == "tomorrow":
            tomorrow = (now + timedelta(days=1)).date()
            date_str = format_date_with_month(tomorrow)
            text = format_daily_schedule(bookings, date_str)
        elif period == "week":
            start_date = (now - timedelta(days=now.weekday())).date()
            end_date = (start_date + timedelta(days=6))
            week_range = f"{format_date_with_month(start_date)}-{format_date_with_month(end_date)}"
            text = format_weekly_schedule(bookings, week_range)
        else:  # month
            month_str = format_month_title(now.date())
            text = format_monthly_schedule(bookings, month_str)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_schedule_filters_kb(bookings, period)
        )

async def handle_schedule_back(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await show_schedule(callback)

async def handle_cancel_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏–π"""
    period = callback.data.split(":")[2]  # schedule:cancel:period
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        bookings = await get_bookings_for_period(session, callback.from_user.id, period)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
        text = [f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ {get_period_title(period)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:\n"]
        
        now = datetime.now()
        has_bookings = False
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        sorted_bookings = sorted(
            bookings,
            key=lambda b: (b.date, b.start_time)
        )
        
        current_date = None
        for booking in sorted_bookings:
            booking_datetime = datetime.combine(booking.date, booking.start_time)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if period in ["week", "month"] and booking.date != current_date:
                current_date = booking.date
                text.append(f"\nüìÖ {format_date_with_month(current_date)}")
            
            if booking.status == BookingStatus.APPROVED:
                if period in ["today", "tomorrow"] or (period in ["week", "month"] and booking_datetime > now):
                    has_bookings = True
                    text.append(
                        f"\n‚è∞ {booking.start_time.strftime('%H:%M')}-{booking.end_time.strftime('%H:%M')} | "
                        f"{booking.child.name} {booking.child.surname} ({booking.child.grade} –∫–ª–∞—Å—Å) | "
                        f"{booking.subject_name}"
                    )
            elif booking.status == BookingStatus.PENDING:
                text.append(
                    f"\n‚ö†Ô∏è {booking.child.name} {booking.child.surname} "
                    f"({booking.start_time.strftime('%H:%M')}-{booking.end_time.strftime('%H:%M')}) - "
                    "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                )
        
        if not has_bookings:
            text.append("\n–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–º–µ–Ω—ã
        await callback.message.edit_text(
            "\n".join(text),
            reply_markup=get_schedule_with_cancel_kb(bookings, period)
        )

async def handle_cancel_booking(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    booking_id = int(callback.data.split(":")[2])
    
    async with async_session_maker() as session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–∑ –ë–î
        tutor = await session.execute(
            select(Tutor).where(Tutor.telegram_id == callback.from_user.id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        booking = await session.execute(
            select(Booking)
            .options(
                selectinload(Booking.child),
                selectinload(Booking.parent)
            )
            .where(
                Booking.id == booking_id,
                Booking.tutor_id == tutor.id,
                Booking.status == BookingStatus.APPROVED
            )
        )
        booking = booking.scalar_one_or_none()
        
        if not booking:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ –∑–∞–Ω—è—Ç–∏—è –±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤
        lesson_datetime = datetime.combine(booking.date, booking.start_time)
        if (lesson_datetime - datetime.now()).total_seconds() < 2 * 3600:
            await callback.answer(
                "‚ùå –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –¥–æ –∑–∞–Ω—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤",
                show_alert=True
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            booking_to_cancel={
                "id": booking.id,
                "child_name": booking.child.name,
                "child_surname": booking.child.surname,
                "subject_name": booking.subject_name,
                "date": booking.date.isoformat(),
                "start_time": booking.start_time.strftime("%H:%M"),
                "end_time": booking.end_time.strftime("%H:%M"),
                "parent_id": booking.parent_id,
                "tutor_id": tutor.id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                "tutor_name": tutor.name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
                "tutor_surname": tutor.surname,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
                "tutor_patronymic": tutor.patronymic  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            }
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        text = (
            "‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ?\n\n"
            f"üë§ –†–µ–±–µ–Ω–æ–∫: {booking.child.name} {booking.child.surname}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name}\n"
            f"üìÖ –î–∞—Ç–∞: {format_date_with_month(booking.date)}\n"
            f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n\n"
            "‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –∑–∞–Ω—è—Ç–∏—è"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_cancel_confirmation_kb(booking_id)
        )

async def handle_cancel_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–∏–∏
    data = await state.get_data()
    booking_data = data.get("booking_to_cancel")
    
    if not booking_data:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    booking_id = booking_data["id"]
    
    async with async_session_maker() as session:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        tutor = await session.execute(
            select(Tutor).where(Tutor.telegram_id == callback.from_user.id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor or tutor.id != booking_data["tutor_id"]:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å
        booking = await session.get(Booking, booking_id)
        
        if not booking or booking.status != BookingStatus.APPROVED:
            await callback.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        if booking.tutor_id != tutor.id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ –∑–∞–Ω—è—Ç–∏—è –±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤
        lesson_datetime = datetime.combine(booking.date, booking.start_time)
        if (lesson_datetime - datetime.now()).total_seconds() < 2 * 3600:
            await callback.answer(
                "‚ùå –û—Ç–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –¥–æ –∑–∞–Ω—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤",
                show_alert=True
            )
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        booking.status = BookingStatus.CANCELLED
        booking.cancelled_at = datetime.now()
        booking.cancelled_by = "tutor"
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id —Ä–æ–¥–∏—Ç–µ–ª—è
        parent = await session.get(Parent, booking_data["parent_id"])
        if not parent:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        tutor_full_name = f"{booking_data['tutor_surname']} {booking_data['tutor_name']}"
        if booking_data['tutor_patronymic']:
            tutor_full_name += f" {booking_data['tutor_patronymic']}"
            
        notification_text = (
            "‚ùå –ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º\n\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_full_name}\n"
            f"üë§ –†–µ–±–µ–Ω–æ–∫: {booking_data['child_name']} {booking_data['child_surname']}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking_data['subject_name']}\n"
            f"üìÖ –î–∞—Ç–∞: {format_date_with_month(datetime.fromisoformat(booking_data['date']).date())}\n"
            f"üïí –í—Ä–µ–º—è: {booking_data['start_time']} - {booking_data['end_time']}"
        )
        
        await parent_bot.send_message(
            chat_id=parent.telegram_id,
            text=notification_text
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        await show_schedule(callback)
        await callback.answer("‚úÖ –ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")

def register_schedule_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    dp.callback_query.register(show_schedule, lambda c: c.data == "show_schedule")
    dp.callback_query.register(
        handle_schedule_filter,
        lambda c: c.data.startswith("schedule:") and c.data.split(":")[1] in ["today", "tomorrow", "week", "month"]
    )
    dp.callback_query.register(
        handle_cancel_menu,
        lambda c: c.data.startswith("schedule:cancel:") and c.data.split(":")[2] in ["today", "tomorrow", "week", "month"]
    )
    dp.callback_query.register(
        handle_cancel_booking,
        lambda c: c.data.startswith("schedule:cancel:") and c.data.split(":")[2].isdigit()
    )
    dp.callback_query.register(
        handle_cancel_confirmation,
        lambda c: c.data.startswith("schedule:confirm_cancel:")
    )
    dp.callback_query.register(handle_schedule_back, lambda c: c.data == "schedule:back")
    dp.callback_query.register(back_to_main_menu, lambda c: c.data == "back_to_main")