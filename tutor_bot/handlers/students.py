from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select, distinct
from sqlalchemy.orm import joinedload, contains_eager

from common.database import async_session_maker, Booking, Child, BookingStatus, Tutor

async def show_my_students(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –∑–∞–ø–∏—Å–∏ –∫ —ç—Ç–æ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        query = (
            select(Child)
            .join(Child.bookings)
            .join(Booking.tutor)
            .where(Tutor.telegram_id == callback_query.from_user.id)
            .options(contains_eager(Child.bookings))
            .distinct()
        )
        
        result = await session.execute(query)
        students = result.unique().scalars().all()

        if not students:
            await callback_query.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–µ–Ω–∏–∫–æ–≤
        keyboard = []
        for student in students:
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{student.name} {student.surname}",
                    callback_data=f"show_student_{student.id}"
                )
            ])

        keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")])

        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

async def show_student_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ"""
    student_id = int(callback_query.data.split('_')[2])

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ –∏ –µ–≥–æ –∑–∞–ø–∏—Å—è—Ö –∫ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
        query = (
            select(Child)
            .options(joinedload(Child.bookings).joinedload(Booking.tutor))
            .where(Child.id == student_id)
        )
        
        result = await session.execute(query)
        student = result.unique().scalar_one_or_none()

        if not student:
            await callback_query.message.edit_text(
                "‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤", callback_data="my_students")]
                ])
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor_bookings = [
            booking for booking in student.bookings 
            if booking.tutor.telegram_id == callback_query.from_user.id
        ]

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–∏—Å—è–º
        total_bookings = len(tutor_bookings)
        completed_bookings = sum(1 for b in tutor_bookings if b.status == BookingStatus.APPROVED)
        upcoming_bookings = 0  # TODO: Add logic for upcoming bookings

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—á–µ–Ω–∏–∫–µ
        text = (
            f"üë§ –£—á–µ–Ω–∏–∫: {student.name} {student.surname}\n"
            f"{'üßë' if student.gender.value == 'male' else 'üëß'} –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if student.gender.value == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"üìö –ö–ª–∞—Å—Å: {student.grade}\n"
            f"üìñ –£—á–µ–±–Ω–∏–∫: {student.textbook_info or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–Ω—è—Ç–∏–π —Å –≤–∞–º–∏:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_bookings}\n"
            f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {completed_bookings}\n"
            f"‚Ä¢ –ü—Ä–µ–¥—Å—Ç–æ–∏—Ç: {upcoming_bookings}"
        )

        keyboard = [
            [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤", callback_data="my_students")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]

        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

def register_students_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–µ–Ω–∏–∫–æ–≤"""
    dp.callback_query.register(show_my_students, lambda c: c.data == "my_students")
    dp.callback_query.register(show_student_info, lambda c: c.data.startswith("show_student_")) 