from datetime import datetime, timedelta, date
from typing import List, Dict, Optional
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from common.database import Booking, BookingStatus, Tutor

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (–¥–ª—è –¥–∞—Ç)
MONTHS_RU_GENITIVE = {
    1: "—è–Ω–≤–∞—Ä—è",
    2: "—Ñ–µ–≤—Ä–∞–ª—è",
    3: "–º–∞—Ä—Ç–∞",
    4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è",
    6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è",
    8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è",
    10: "–æ–∫—Ç—è–±—Ä—è",
    11: "–Ω–æ—è–±—Ä—è",
    12: "–¥–µ–∫–∞–±—Ä—è"
}

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
MONTHS_RU_NOMINATIVE = {
    1: "–Ø–Ω–≤–∞—Ä—å",
    2: "–§–µ–≤—Ä–∞–ª—å",
    3: "–ú–∞—Ä—Ç",
    4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π",
    6: "–ò—é–Ω—å",
    7: "–ò—é–ª—å",
    8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å",
    10: "–û–∫—Ç—è–±—Ä—å",
    11: "–ù–æ—è–±—Ä—å",
    12: "–î–µ–∫–∞–±—Ä—å"
}

def get_date_range(period: str) -> tuple[date, date]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    today = date.today()
    
    if period == "today":
        start_date = today
        end_date = today + timedelta(days=1)
    elif period == "tomorrow":
        start_date = today + timedelta(days=1)
        end_date = today + timedelta(days=2)
    elif period == "week":
        # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        start_date = today - timedelta(days=today.weekday())
        # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        end_date = start_date + timedelta(days=7)
    else:  # month
        # –ù–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        start_date = today.replace(day=1)
        # –ù–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if today.month == 12:
            end_date = today.replace(year=today.year + 1, month=1, day=1)
        else:
            end_date = today.replace(month=today.month + 1, day=1)
    
    return start_date, end_date

async def get_bookings_for_period(
    session: AsyncSession,
    telegram_id: int,
    period: str
) -> List[Booking]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ telegram_id
    tutor = await session.execute(
        select(Tutor).where(Tutor.telegram_id == telegram_id)
    )
    tutor = tutor.scalar_one_or_none()
    
    if not tutor:
        print(f"Tutor not found for telegram_id: {telegram_id}")
        return []
    
    start_date, end_date = get_date_range(period)
    
    query = select(Booking).options(
        selectinload(Booking.child),
        selectinload(Booking.tutor)
    ).where(
        Booking.tutor_id == tutor.id,
        Booking.date >= start_date,
        Booking.date < end_date,
        Booking.status.in_([BookingStatus.APPROVED, BookingStatus.PENDING])
    ).order_by(Booking.date, Booking.start_time)
    
    result = await session.execute(query)
    
    # from sqlalchemy.dialects import sqlite
    # compiled = query.compile(
    #     dialect=sqlite.dialect(),
    #     compile_kwargs={"literal_binds": True}
    # )

    # print(compiled)

    # print(f'DEBUG:{list(result.scalars().all())}')
    return list(result.scalars().all())

def format_booking_status(status: BookingStatus) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if status == BookingStatus.APPROVED:
        return "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"
    elif status == BookingStatus.PENDING:
        return "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    elif status == BookingStatus.REJECTED:
        return "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    else:
        return "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"

def format_daily_schedule(bookings: List[Booking], date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"""
    print('DEBUG:bookings', bookings)
    if not bookings:
        return f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}\n\nüö´ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"
    
    total_confirmed = sum(1 for b in bookings if b.status == BookingStatus.APPROVED)
    total_pending = sum(1 for b in bookings if b.status == BookingStatus.PENDING)
    total_income = sum(b.price for b in bookings if b.status == BookingStatus.APPROVED)
    
    text = [f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}\n"]
    
    for booking in bookings:
        text.extend([
            f"\n‚è∞ {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}",
            f"üë§ {booking.child.name} {booking.child.surname} ({booking.child.grade} –∫–ª–∞—Å—Å)",
            f"üìö {booking.subject_name} ({booking.lesson_type})",
            f"üí∞ {booking.price} —Ä—É–±. | {format_booking_status(booking.status)}\n"
        ])
    
    text.extend([
        "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {len(bookings)}",
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {total_confirmed} | –û–∂–∏–¥–∞–µ—Ç: {total_pending}",
        f"–î–æ—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å: {total_income} —Ä—É–±."
    ])
    
    return "\n".join(text)

def format_weekly_schedule(bookings: List[Booking], week_range: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    if not bookings:
        return f"üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week_range})\n\nüö´ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–Ω—è–º
    bookings_by_day: Dict[date, List[Booking]] = {}
    for booking in bookings:
        if booking.date not in bookings_by_day:
            bookings_by_day[booking.date] = []
        bookings_by_day[booking.date].append(booking)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_confirmed = sum(1 for b in bookings if b.status == BookingStatus.APPROVED)
    total_pending = sum(1 for b in bookings if b.status == BookingStatus.PENDING)
    total_income = sum(b.price for b in bookings if b.status == BookingStatus.APPROVED)
    
    text = [f"üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({week_range})\n"]
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    weekdays = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê", "–°–£–ë–ë–û–¢–ê", "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"]
    
    for day_date in sorted(bookings_by_day.keys()):
        day_bookings = bookings_by_day[day_date]
        text.append(f"\nüóì {weekdays[day_date.weekday()]}, {day_date.strftime('%d.%m')}")
        
        for booking in sorted(day_bookings, key=lambda b: b.start_time):
            text.append(
                f"‚è∞ {booking.start_time.strftime('%H:%M')}-{booking.end_time.strftime('%H:%M')} | "
                f"{booking.child.name} {booking.child.surname[0]}. | "
                f"{booking.subject_name}"
                + (" (—ç–∫–∑.)" if booking.lesson_type == "exam" else "")
            )
    
    text.extend([
        "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        f"–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é: {len(bookings)}",
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {total_confirmed} | –û–∂–∏–¥–∞–µ—Ç: {total_pending}",
        f"–î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_income} —Ä—É–±."
    ])
    
    return "\n".join(text)

def format_date_with_month(d: date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Å —Ä—É—Å—Å–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ"""
    return f"{d.day} {MONTHS_RU_GENITIVE[d.month]}"

def format_month_title(d: date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ"""
    print('DEBUG:d', d.month, MONTHS_RU_NOMINATIVE[d.month])
    return f"{MONTHS_RU_NOMINATIVE[d.month]} {d.year}"

def format_monthly_schedule(bookings: List[Booking], month_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü"""
    if not bookings:
        return f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {month_str}\n\nüö´ –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_confirmed = sum(1 for b in bookings if b.status == BookingStatus.APPROVED)
    total_pending = sum(1 for b in bookings if b.status == BookingStatus.PENDING)
    total_cancelled = sum(1 for b in bookings if b.status == BookingStatus.CANCELLED)
    total_income = sum(b.price for b in bookings if b.status == BookingStatus.APPROVED)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
    bookings_by_week: Dict[int, List[Booking]] = {}
    for booking in bookings:
        week_num = booking.date.isocalendar()[1]
        if week_num not in bookings_by_week:
            bookings_by_week[week_num] = []
        bookings_by_week[week_num].append(booking)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    subjects: Dict[str, int] = {}
    for booking in bookings:
        if booking.subject_name not in subjects:
            subjects[booking.subject_name] = 0
        subjects[booking.subject_name] += 1
    
    text = [
        f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {month_str}\n",
        "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:",
        f"- –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {len(bookings)}",
        f"- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {total_confirmed}",
        f"- –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {total_pending}",
        f"- –û—Ç–º–µ–Ω–µ–Ω–æ: {total_cancelled}",
        f"- –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: {total_income} —Ä—É–±.",
        "\nüìà –ü–æ –Ω–µ–¥–µ–ª—è–º:"
    ]
    
    for week_num in sorted(bookings_by_week.keys()):
        week_bookings = bookings_by_week[week_num]
        week_income = sum(b.price for b in week_bookings if b.status == BookingStatus.APPROVED)
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        first_date = min(b.date for b in week_bookings)
        last_date = max(b.date for b in week_bookings)
        if first_date == last_date:
            text.append(
                f"üóì {format_date_with_month(first_date)}: "
                f"{len(week_bookings)} –∑–∞–Ω—è—Ç–∏–π ({week_income} —Ä—É–±.)"
            )
        else:
            text.append(
                f"üóì {format_date_with_month(first_date)}-{format_date_with_month(last_date)}: "
                f"{len(week_bookings)} –∑–∞–Ω—è—Ç–∏–π ({week_income} —Ä—É–±.)"
            )
    
    text.extend([
        "\nüìö –ü–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:"
    ])
    
    for subject, count in sorted(subjects.items(), key=lambda x: x[1], reverse=True):
        text.append(f"- {subject}: {count} –∑–∞–Ω—è—Ç–∏–π")
    
    return "\n".join(text) 