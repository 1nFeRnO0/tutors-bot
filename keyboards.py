from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

DAY_NAMES = {
    'monday': '–ü–Ω',
    'tuesday': '–í—Ç',
    'wednesday': '–°—Ä',
    'thursday': '–ß—Ç',
    'friday': '–ü—Ç',
    'saturday': '–°–±',
    'sunday': '–í—Å'
}

SUBJECTS = [
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "–§–∏–∑–∏–∫–∞",
    "–•–∏–º–∏—è",
    "–ë–∏–æ–ª–æ–≥–∏—è",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
    "–ò—Å—Ç–æ—Ä–∏—è",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
]

def get_start_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")]
    ])
    return keyboard

def get_subjects_keyboard(selected_subjects: list) -> InlineKeyboardMarkup:
    """
    selected_subjects: [{"name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "is_exam": True, "is_standard": True}, ...]
    """
    keyboard = []
    for subject in SUBJECTS:
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        subject_data = next(
            (s for s in selected_subjects if s["name"] == subject),
            {"name": subject, "is_exam": False, "is_standard": False}
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        row = [
            InlineKeyboardButton(
                text=f"{subject}",
                callback_data=f"subject_name_{subject}"  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if subject_data['is_exam'] else '‚¨ú'} –û–ì–≠/–ï–ì–≠",
                callback_data=f"subject_{subject}_exam"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if subject_data['is_standard'] else '‚¨ú'} –°—Ç–∞–Ω–¥–∞—Ä—Ç",
                callback_data=f"subject_{subject}_standard"
            )
        ]
        keyboard.append(row)
    
    keyboard.append([
        InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subjects")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_schedule_table(schedule: dict) -> InlineKeyboardMarkup:
    keyboard = []
    for day_code, day_name in DAY_NAMES.items():
        day_info = schedule.get(day_code, {"active": False, "start": "", "end": ""})
        status = "‚úÖ" if day_info["active"] else "‚¨ú"
        row = [
            InlineKeyboardButton(
                text=f"{status} {day_name}",
                callback_data=f"toggle_{day_code}"
            )
        ]
        if day_info["active"]:
            row.extend([
                InlineKeyboardButton(
                    text=f"üïí {day_info['start'] or '--:--'}",
                    callback_data=f"set_start_{day_code}"
                ),
                InlineKeyboardButton(
                    text=f"üïï {day_info['end'] or '--:--'}",
                    callback_data=f"set_end_{day_code}"
                )
            ])
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="save_schedule")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_hour_keyboard(day_code: str, time_type: str) -> InlineKeyboardMarkup:
    keyboard = []
    row = []
    for hour in range(24):
        if len(row) == 4:
            keyboard.append(row)
            row = []
        row.append(InlineKeyboardButton(
            text=f"{hour:02d}",
            callback_data=f"set_{time_type}_hour_{day_code}_{hour:02d}"
        ))
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_schedule")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_minute_keyboard(day_code: str, time_type: str, hour: int) -> InlineKeyboardMarkup:
    keyboard = []
    row = []
    for minute in range(0, 60, 5):
        if len(row) == 4:
            keyboard.append(row)
            row = []
        row.append(InlineKeyboardButton(
            text=f"{minute:02d}",
            callback_data=f"set_{time_type}_minute_{day_code}_{hour}_{minute}"
        ))
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_schedule")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_registration_form_keyboard(name: str = "", surname: str = "") -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="–ò–º—è", callback_data="edit_name"),
            InlineKeyboardButton(text=name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_name")
        ],
        [
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_surname"),
            InlineKeyboardButton(text=surname or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_surname")
        ],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="finish_name_surname")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", callback_data="edit_profile_name")],
        [InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="edit_profile_subjects")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_profile_description")],
        [InlineKeyboardButton(text="üïí –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_profile_schedule")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")],
        [InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_edit_keyboard(name: str = "", surname: str = "") -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="profile_edit_name"),
            InlineKeyboardButton(text=name or "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="profile_edit_name")
        ],
        [
            InlineKeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é", callback_data="profile_edit_surname"),
            InlineKeyboardButton(text=surname or "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="profile_edit_surname")
        ],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="profile_save_name_surname")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_subjects_keyboard(selected_subjects: list) -> InlineKeyboardMarkup:
    """
    selected_subjects: [{"name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "is_exam": True, "is_standard": True}, ...]
    """
    keyboard = []
    for subject in SUBJECTS:
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–º–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        subject_data = next(
            (s for s in selected_subjects if s["name"] == subject),
            {"name": subject, "is_exam": False, "is_standard": False}
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        row = [
            InlineKeyboardButton(
                text=f"{subject}",
                callback_data=f"subject_name_{subject}"  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if subject_data['is_exam'] else '‚¨ú'} –û–ì–≠/–ï–ì–≠",
                callback_data=f"profile_subject_{subject}_exam"
            ),
            InlineKeyboardButton(
                text=f"{'‚úÖ' if subject_data['is_standard'] else '‚¨ú'} –°—Ç–∞–Ω–¥–∞—Ä—Ç",
                callback_data=f"profile_subject_{subject}_standard"
            )
        ]
        keyboard.append(row)
    
    keyboard.append([
        InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="profile_save_subjects")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_description_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile_cancel_description")],
        [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="profile_save_description")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_schedule_keyboard(schedule: dict) -> InlineKeyboardMarkup:
    keyboard = []
    for day_code, day_name in DAY_NAMES.items():
        day_info = schedule.get(day_code, {"active": False, "start": "", "end": ""})
        status = "‚úÖ" if day_info["active"] else "‚¨ú"
        row = [
            InlineKeyboardButton(
                text=f"{status} {day_name}",
                callback_data=f"profile_toggle_{day_code}"
            )
        ]
        if day_info["active"]:
            row.extend([
                InlineKeyboardButton(
                    text=f"üïí {day_info['start'] or '--:--'}",
                    callback_data=f"profile_set_start_{day_code}"
                ),
                InlineKeyboardButton(
                    text=f"üïï {day_info['end'] or '--:--'}",
                    callback_data=f"profile_set_end_{day_code}"
                )
            ])
        keyboard.append(row)
    keyboard.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile_cancel_schedule"),
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="profile_save_schedule")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_hour_keyboard(day_code: str, time_type: str) -> InlineKeyboardMarkup:
    keyboard = []
    row = []
    for hour in range(24):
        if len(row) == 4:
            keyboard.append(row)
            row = []
        row.append(InlineKeyboardButton(
            text=f"{hour:02d}",
            callback_data=f"profile_hour_{time_type}_{day_code}_{hour}"
        ))
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile_cancel_time")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_profile_minute_keyboard(day_code: str, time_type: str, hour: int) -> InlineKeyboardMarkup:
    keyboard = []
    row = []
    for minute in range(0, 60, 5):
        if len(row) == 4:
            keyboard.append(row)
            row = []
        row.append(InlineKeyboardButton(
            text=f"{minute:02d}",
            callback_data=f"profile_minute_{time_type}_{day_code}_{hour}_{minute}"
        ))
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile_cancel_time")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)