from datetime import datetime, timedelta
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from common.database import async_session_maker, Booking, BookingStatus
from common.config import TUTOR_BOT_TOKEN, PARENT_BOT_TOKEN

tutor_bot = Bot(token=TUTOR_BOT_TOKEN)
parent_bot = Bot(token=PARENT_BOT_TOKEN)

async def format_lesson_notification(booking: Booking, hours_left: float, is_tutor: bool = False) -> tuple[str, InlineKeyboardMarkup]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–Ω—è—Ç–∏–∏"""
    hours_text = "—á–∞—Å" if 0.9 < hours_left < 1.1 else "—á–∞—Å–∞" if 1 < hours_left < 5 else "—á–∞—Å–æ–≤"

    if is_tutor:
        text = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–Ω—è—Ç–∏–∏ —á–µ—Ä–µ–∑ {int(hours_left)} {hours_text}!\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
            f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç —Ä–æ–¥–∏—Ç–µ–ª—è: {booking.parent.phone if booking.parent.phone else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
    else:
        text = (
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–Ω—è—Ç–∏–∏ —á–µ—Ä–µ–∑ {int(hours_left)} {hours_text}!\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {booking.tutor.name} {booking.tutor.surname}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
            f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ"
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings" if not is_tutor else "tutor_pending_bookings")]
    ])

    return text, keyboard

async def check_and_send_notifications():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    now = datetime.now()
    today = now.date()
    tomorrow = today + timedelta(days=1)

    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        upcoming_bookings = await session.execute(
            select(Booking)
            .options(
                selectinload(Booking.tutor),
                selectinload(Booking.parent),
                selectinload(Booking.child)
            )
            .where(
                and_(
                    Booking.status == BookingStatus.APPROVED,
                    Booking.date.in_([today, tomorrow])
                )
            )
        )
        upcoming_bookings = upcoming_bookings.scalars().all()

        for booking in upcoming_bookings:
            lesson_datetime = datetime.combine(booking.date, booking.start_time)
            time_to_lesson = lesson_datetime - now
            hours_to_lesson = time_to_lesson.total_seconds() / 3600

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
            if 23.5 <= hours_to_lesson <= 24.5 and not booking.notification_24h_sent:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                text, keyboard = await format_lesson_notification(booking, hours_to_lesson, is_tutor=True)
                try:
                    await tutor_bot.send_message(
                        chat_id=booking.tutor.telegram_id,
                        text=text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"Error sending notification to tutor: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
                text, keyboard = await format_lesson_notification(booking, hours_to_lesson, is_tutor=False)
                try:
                    await parent_bot.send_message(
                        chat_id=booking.parent.telegram_id,
                        text=text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"Error sending notification to parent: {e}")

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                booking.notification_24h_sent = True
                await session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å
            elif 0.9 <= hours_to_lesson <= 1.1 and not booking.notification_1h_sent:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                text, keyboard = await format_lesson_notification(booking, hours_to_lesson, is_tutor=True)
                try:
                    await tutor_bot.send_message(
                        chat_id=booking.tutor.telegram_id,
                        text=text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"Error sending notification to tutor: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
                text, keyboard = await format_lesson_notification(booking, hours_to_lesson, is_tutor=False)
                try:
                    await parent_bot.send_message(
                        chat_id=booking.parent.telegram_id,
                        text=text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"Error sending notification to parent: {e}")

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                booking.notification_1h_sent = True
                await session.commit() 

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞ 1 —á–∞—Å
            elif 0.05 <= hours_to_lesson <= 1.1 and not booking.notification_1h_sent:
                print(hours_to_lesson)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                text, keyboard = await format_lesson_notification(booking, hours_to_lesson, is_tutor=True)
                try:
                    await tutor_bot.send_message(
                        chat_id=booking.tutor.telegram_id,
                        text=text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"Error sending notification to tutor: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
                text, keyboard = await format_lesson_notification(booking, hours_to_lesson, is_tutor=False)
                try:
                    await parent_bot.send_message(
                        chat_id=booking.parent.telegram_id,
                        text=text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"Error sending notification to parent: {e}")

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                booking.notification_1h_sent = True
                await session.commit() 