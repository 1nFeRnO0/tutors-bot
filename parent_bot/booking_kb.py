from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import calendar
from typing import List, Dict, Any

from common.database import Child, Tutor

def get_children_keyboard(children: List[Child]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    keyboard = []
    
    for child in children:
        child_name = f"{child.name} {child.surname}"
        if child.patronymic:
            child_name = f"{child.name} {child.patronymic} {child.surname}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=child_name,
                callback_data=f"book_child_{child.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_tutors_keyboard(tutors: List[Tutor]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    keyboard = []
    
    for tutor in tutors:
        tutor_name = f"{tutor.name} {tutor.surname}"
        if tutor.patronymic:
            tutor_name = f"{tutor.name} {tutor.patronymic} {tutor.surname}"
        
        keyboard.append([
            InlineKeyboardButton(
                text=tutor_name,
                callback_data=f"book_tutor_{tutor.id}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_child_selection")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_subjects_keyboard(subjects: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    keyboard = []
    
    for subject in subjects:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
        if subject.get('is_standard') or subject.get('is_exam'):
            keyboard.append([
                InlineKeyboardButton(
                    text=subject['name'],
                    callback_data=f"book_subject_{subject['name']}"
                )
            ])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_tutor_selection")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_lesson_type_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ", callback_data="book_type_standard"),
            InlineKeyboardButton(text="üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É", callback_data="book_type_exam")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subject_selection")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_calendar_keyboard(year: int, month: int, available_dates: List[datetime.date]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    
    Args:
        year (int): –ì–æ–¥
        month (int): –ú–µ—Å—è—Ü
        available_dates (List[datetime.date]): –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞-–∫–∞–ª–µ–Ω–¥–∞—Ä—å
    """
    keyboard = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_names = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ]
    keyboard.append([
        InlineKeyboardButton(
            text=f"üìÖ {month_names[month-1]} {year}",
            callback_data="ignore"
        )
    ])
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
    keyboard.append([
        InlineKeyboardButton(text=day, callback_data="ignore")
        for day in days_of_week
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ –º–µ—Å—è—Ü
    cal = calendar.monthcalendar(year, month)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏
    for week in cal:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                date = datetime(year, month, day).date()
                if date in available_dates:
                    row.append(InlineKeyboardButton(
                        text=str(day),
                        callback_data=f"book_date_{date.isoformat()}"
                    ))
                else:
                    row.append(InlineKeyboardButton(text="‚ùå", callback_data="ignore"))
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month = month - 1
    prev_year = year
    if prev_month == 0:
        prev_month = 12
        prev_year -= 1
    nav_row.append(InlineKeyboardButton(
        text="‚óÄÔ∏è",
        callback_data=f"calendar_{prev_year}_{prev_month}"
    ))
    
    # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
    next_month = month + 1
    next_year = year
    if next_month == 13:
        next_month = 1
        next_year += 1
    nav_row.append(InlineKeyboardButton(
        text="‚ñ∂Ô∏è",
        callback_data=f"calendar_{next_year}_{next_month}"
    ))
    keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_time_slots_keyboard(available_slots: List[tuple]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    
    Args:
        available_slots (List[tuple]): –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è_–æ–∫–æ–Ω—á–∞–Ω–∏—è)
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    """
    keyboard = []
    
    for start_time, end_time in available_slots:
        keyboard.append([
            InlineKeyboardButton(
                text=f"üïí {start_time.strftime('%H:%M')} - {end_time.strftime('%H:%M')}",
                callback_data=f"book_time_{start_time.strftime('%H:%M')}_{end_time.strftime('%H:%M')}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date_selection")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_booking")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_booking_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_time_selection")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 