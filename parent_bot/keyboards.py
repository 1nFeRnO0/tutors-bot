from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from common.database import Child, Gender

def get_start_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")]
    ])

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üë∂ –ú–æ–∏ –¥–µ—Ç–∏", callback_data="children")],
        [InlineKeyboardButton(text="üîç –ú–æ–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã", callback_data="tutors")],
        [InlineKeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")]
    ])

def get_registration_form_keyboard(name: str = "", surname: str = "", patronymic: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="–ò–º—è", callback_data="edit_name"),
            InlineKeyboardButton(text=name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_name")
        ],
        [
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_surname"),
            InlineKeyboardButton(text=surname or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_surname")
        ],
        [
            InlineKeyboardButton(text="–û—Ç—á–µ—Å—Ç–≤–æ", callback_data="edit_patronymic"),
            InlineKeyboardButton(text=patronymic or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_patronymic")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
    if name and surname:
        keyboard.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="finish_name_surname")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_registration_menu_keyboard(name: str = "", surname: str = "", patronymic: str = "") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="–ò–º—è", callback_data="edit_name"),
            InlineKeyboardButton(text=name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_name")
        ],
        [
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_surname"),
            InlineKeyboardButton(text=surname or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_surname")
        ],
        [
            InlineKeyboardButton(text="–û—Ç—á–µ—Å—Ç–≤–æ", callback_data="edit_patronymic"),
            InlineKeyboardButton(text=patronymic or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="edit_patronymic")
        ],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="finish_registration")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 

def get_children_list_keyboard(children: list[Child]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –¥–µ—Ç–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = []
    
    for child in children:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û —Ä–µ–±–µ–Ω–∫–∞
        child_name = f"{child.name} {child.surname}"
        if child.patronymic:
            child_name = f"{child.name} {child.patronymic} {child.surname}"
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(text=child_name, callback_data=f"child_info_{child.id}"),
            InlineKeyboardButton(text="‚úèÔ∏è", callback_data=f"edit_child_{child.id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"delete_child_{child.id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞", callback_data="add_child")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_gender_keyboard(selected_gender: Gender = None, is_edit: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    prefix = "edit_gender" if is_edit else "add_gender"
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{'‚úì ' if selected_gender == Gender.MALE else ''}–ú", 
                callback_data=f"{prefix}_M"
            ),
            InlineKeyboardButton(
                text=f"{'‚úì ' if selected_gender == Gender.FEMALE else ''}–ñ", 
                callback_data=f"{prefix}_F"
            )
        ]
    ])

def get_grade_keyboard(selected_grade: int = None, is_edit: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
    prefix = "edit_grade" if is_edit else "add_grade"
    keyboard = []
    row = []
    for grade in range(1, 12):
        row.append(InlineKeyboardButton(
            text=f"{'‚úì ' if grade == selected_grade else ''}{grade}",
            callback_data=f"{prefix}_{grade}"
        ))
        if len(row) == 4:  # –ü–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_child_edit_keyboard(child: Child) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–ò–û", callback_data="edit_fio")],
        [
            InlineKeyboardButton(text="–ö–ª–∞—Å—Å", callback_data="edit_grade"),
            InlineKeyboardButton(text=str(child.grade), callback_data="edit_grade")
        ],
        [InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —É—á–µ–±–Ω–∏–∫", callback_data="edit_textbook")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="show_children")]
    ])

def get_fio_edit_keyboard(child: Child) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò–º—è", callback_data="child_edit_name"),
            InlineKeyboardButton(text=child.name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="child_edit_name")
        ],
        [
            InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="child_edit_surname"),
            InlineKeyboardButton(text=child.surname or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="child_edit_surname")
        ],
        [
            InlineKeyboardButton(text="–û—Ç—á–µ—Å—Ç–≤–æ", callback_data="child_edit_patronymic"),
            InlineKeyboardButton(text=child.patronymic or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", callback_data="child_edit_patronymic")
        ],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="edit_back")]
    ])

def get_tutors_list_keyboard(tutors: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    keyboard = []
    
    for tutor in tutors:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor_name = f"{tutor.name} {tutor.surname}"
        if tutor.patronymic:
            tutor_name = f"{tutor.name} {tutor.patronymic} {tutor.surname}"
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(text=tutor_name, callback_data=f"favorite_tutor_info_{tutor.id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"favorite_delete_tutor_{tutor.id}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", callback_data="add_tutor")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_confirm_delete_tutor_keyboard(tutor_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data=f"favorite_confirm_delete_tutor_{tutor_id}"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="tutors")
        ]
    ]) 