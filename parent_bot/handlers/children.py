from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from contextlib import asynccontextmanager
from sqlalchemy.orm import selectinload
import asyncio

from common.database import Parent, Child, Gender, async_session_maker
from parent_bot.keyboards import (
    get_children_list_keyboard, get_gender_keyboard, 
    get_grade_keyboard, get_child_edit_keyboard,
    get_fio_edit_keyboard
)

class AddChildStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞"""
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_patronymic = State()
    waiting_for_gender = State()
    waiting_for_grade = State()
    waiting_for_textbook = State()

class EditChildStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞"""
    main_menu = State()  # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fio_menu = State()   # –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û
    editing_name = State()
    editing_surname = State()
    editing_patronymic = State()
    editing_gender = State()
    editing_grade = State()
    editing_textbook = State()
    editing_textbook_input = State()

# === Handlers for adding a new child ===

async def start_add_child(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞"""
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(AddChildStates.waiting_for_name)

async def process_add_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(AddChildStates.waiting_for_surname)

async def process_add_surname(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    await state.update_data(surname=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ–Ω–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_add_patronymic")]
        ])
    )
    await state.set_state(AddChildStates.waiting_for_patronymic)

async def process_add_patronymic(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    await state.update_data(patronymic=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(AddChildStates.waiting_for_gender)

async def skip_add_patronymic(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    await state.update_data(patronymic=None)
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(AddChildStates.waiting_for_gender)

async def process_add_gender(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    gender = Gender.MALE if callback_query.data == "add_gender_M" else Gender.FEMALE
    await state.update_data(gender=gender)
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=get_grade_keyboard()
    )
    await state.set_state(AddChildStates.waiting_for_grade)

async def process_add_grade(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏"""
    grade = int(callback_query.data.split('_')[2])
    await state.update_data(grade=grade)
    
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–±–Ω–∏–∫–µ (–∞–≤—Ç–æ—Ä, –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –≥–æ–¥ –∏–∑–¥–∞–Ω–∏—è):"
    )
    await state.set_state(AddChildStates.waiting_for_textbook)

async def process_add_textbook(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        async with session.begin():
            parent = await session.execute(
                select(Parent).where(Parent.telegram_id == message.from_user.id)
            )
            parent = parent.scalar_one_or_none()
            
            if parent:
                child = Child(
                    parent_id=parent.id,
                    name=data['name'],
                    surname=data['surname'],
                    patronymic=data.get('patronymic'),
                    gender=data['gender'],
                    grade=data['grade'],
                    textbook_info=message.text
                )
                session.add(child)
    
    await message.answer(
        "‚úÖ –†–µ–±–µ–Ω–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π", callback_data="show_children")]
        ])
    )
    await state.clear()

# === Handlers for editing child information ===

async def start_edit_child(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞"""
    child_id = int(callback_query.data.split('_')[2])
    
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == child_id)
        )
        child = child.scalar_one_or_none()
        
        if child:
            await state.update_data(child_id=child_id)
            textbook_info = child.textbook_info or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await callback_query.message.edit_text(
                f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞:\n\n"
                f"üìö –£—á–µ–±–Ω–∏–∫: {textbook_info}",
                reply_markup=get_child_edit_keyboard(child)
            )
            await state.set_state(EditChildStates.main_menu)

async def edit_fio(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        if child:
            await callback_query.message.edit_text(
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û:",
                reply_markup=get_fio_edit_keyboard(child)
            )
            await state.set_state(EditChildStates.fio_menu)

async def edit_back(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        if child:
            textbook_info = child.textbook_info or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await callback_query.message.edit_text(
                f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞:\n\n"
                f"üìö –£—á–µ–±–Ω–∏–∫: {textbook_info}",
                reply_markup=get_child_edit_keyboard(child)
            )
            await state.set_state(EditChildStates.main_menu)

async def edit_name(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏"""
    print('—è –∑–¥–µ—Å—å')
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(EditChildStates.editing_name)

async def edit_surname(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏"""
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é —Ä–µ–±–µ–Ω–∫–∞:")
    await state.set_state(EditChildStates.editing_surname)

async def edit_patronymic(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞"""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ–Ω–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_edit_patronymic")]
        ])
    )
    await state.set_state(EditChildStates.editing_patronymic)

async def process_edit_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        async with session.begin():
            child = await session.execute(
                select(Child).where(Child.id == data['child_id'])
            )
            child = child.scalar_one_or_none()
            
            if child:
                child.name = message.text
                await message.answer(
                    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û:",
                    reply_markup=get_fio_edit_keyboard(child)
                )
                await state.set_state(EditChildStates.fio_menu)

async def process_edit_surname(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Ñ–∞–º–∏–ª–∏–∏"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        async with session.begin():
            child = await session.execute(
                select(Child).where(Child.id == data['child_id'])
            )
            child = child.scalar_one_or_none()
            
            if child:
                child.surname = message.text
                await message.answer(
                    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û:",
                    reply_markup=get_fio_edit_keyboard(child)
                )
                await state.set_state(EditChildStates.fio_menu)

async def process_edit_patronymic(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Å—Ç–≤–∞"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        async with session.begin():
            child = await session.execute(
                select(Child).where(Child.id == data['child_id'])
            )
            child = child.scalar_one_or_none()
            
            if child:
                child.patronymic = message.text
                await message.answer(
                    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û:",
                    reply_markup=get_fio_edit_keyboard(child)
                )
                await state.set_state(EditChildStates.fio_menu)

async def skip_edit_patronymic(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –æ—Ç—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        async with session.begin():
            child = await session.execute(
                select(Child).where(Child.id == data['child_id'])
            )
            child = child.scalar_one_or_none()
            
            if child:
                child.patronymic = None
                await callback_query.message.edit_text(
                    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ò–û:",
                    reply_markup=get_fio_edit_keyboard(child)
                )
                await state.set_state(EditChildStates.fio_menu)

async def edit_grade(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        if child:
            await callback_query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å:",
                reply_markup=get_grade_keyboard(selected_grade=child.grade, is_edit=True)
            )
            await state.set_state(EditChildStates.editing_grade)

async def process_edit_grade(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    data = await state.get_data()
    grade = int(callback_query.data.split('_')[2])
    
    async with async_session_maker() as session:
        async with session.begin():
            child = await session.execute(
                select(Child).where(Child.id == data['child_id'])
            )
            child = child.scalar_one_or_none()
            
            if child:
                child.grade = grade
                textbook_info = child.textbook_info or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                await callback_query.message.edit_text(
                    f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞:\n\n"
                    f"üìö –£—á–µ–±–Ω–∏–∫: {textbook_info}",
                    reply_markup=get_child_edit_keyboard(child)
                )
                await state.set_state(EditChildStates.main_menu)

async def edit_textbook(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–±–Ω–∏–∫–µ"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        if child:
            current_textbook = child.textbook_info or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            await callback_query.message.edit_text(
                f"–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–±–Ω–∏–∫–µ:\n{current_textbook}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–±–Ω–∏–∫–µ:"
            )
            await state.set_state(EditChildStates.editing_textbook_input)

async def process_edit_textbook(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–±–Ω–∏–∫–µ"""
    data = await state.get_data()
    
    async with async_session_maker() as session:
        async with session.begin():
            child = await session.execute(
                select(Child).where(Child.id == data['child_id'])
            )
            child = child.scalar_one_or_none()
            
            if child:
                child.textbook_info = message.text
                textbook_info = child.textbook_info or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                await message.answer(
                    f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–±–µ–Ω–∫–∞:\n\n"
                    f"üìö –£—á–µ–±–Ω–∏–∫: {textbook_info}",
                    reply_markup=get_child_edit_keyboard(child)
                )
                await state.set_state(EditChildStates.main_menu)

# === Delete child handlers ===

async def confirm_delete_child(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞"""
    child_id = int(callback_query.data.split('_')[2])
    
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == child_id)
        )
        child = child.scalar_one_or_none()
        
        if child:
            child_name = f"{child.name} {child.surname}"
            if child.patronymic:
                child_name = f"{child.name} {child.patronymic} {child.surname}"
            
            await callback_query.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {child_name}?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_delete_{child_id}"),
                        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="show_children")
                    ]
                ])
            )

async def delete_child(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ–±–µ–Ω–∫–∞"""
    child_id = int(callback_query.data.split('_')[2])
    
    async with async_session_maker() as session:
        async with session.begin():
            child = await session.execute(
                select(Child).where(Child.id == child_id)
            )
            child = child.scalar_one_or_none()
            
            if child:
                await session.delete(child)
    
    await callback_query.answer("–†–µ–±–µ–Ω–æ–∫ —É–¥–∞–ª–µ–Ω")
    await show_children_list(callback_query)

async def show_children_list(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è"""
    async with async_session_maker() as session:
        async with session.begin():
            parent = await session.execute(
                select(Parent).options(selectinload(Parent.children)).where(Parent.telegram_id == callback_query.from_user.id)
            )
            parent = parent.scalar_one_or_none()
            
            if not parent:
                await callback_query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            if not parent.children:
                text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞:"
            else:
                text = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:"
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_children_list_keyboard(parent.children)
            )

def register_children_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—å–º–∏"""
    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–µ—Ç–µ–π
    dp.callback_query.register(show_children_list, lambda c: c.data == "children")
    dp.callback_query.register(show_children_list, lambda c: c.data == "show_children")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
    dp.callback_query.register(start_add_child, lambda c: c.data == "add_child")
    dp.message.register(process_add_name, AddChildStates.waiting_for_name)
    dp.message.register(process_add_surname, AddChildStates.waiting_for_surname)
    dp.message.register(process_add_patronymic, AddChildStates.waiting_for_patronymic)
    dp.callback_query.register(skip_add_patronymic, lambda c: c.data == "skip_add_patronymic")
    dp.callback_query.register(process_add_gender, lambda c: c.data.startswith("add_gender_"))
    dp.callback_query.register(process_add_grade, lambda c: c.data.startswith("add_grade_"))
    dp.message.register(process_add_textbook, AddChildStates.waiting_for_textbook)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
    dp.callback_query.register(start_edit_child, lambda c: c.data.startswith("edit_child_"))
    dp.callback_query.register(edit_fio, lambda c: c.data == "edit_fio")
    dp.callback_query.register(edit_back, lambda c: c.data == "edit_back")
    dp.callback_query.register(edit_name, lambda c: c.data == "child_edit_name")
    dp.callback_query.register(edit_surname, lambda c: c.data == "child_edit_surname")
    dp.callback_query.register(edit_patronymic, lambda c: c.data == "child_edit_patronymic")
    dp.callback_query.register(edit_grade, lambda c: c.data == "edit_grade")
    dp.callback_query.register(edit_textbook, lambda c: c.data == "edit_textbook")
    dp.message.register(process_edit_name, EditChildStates.editing_name)
    dp.message.register(process_edit_surname, EditChildStates.editing_surname)
    dp.message.register(process_edit_patronymic, EditChildStates.editing_patronymic)
    dp.callback_query.register(skip_edit_patronymic, lambda c: c.data == "skip_edit_patronymic")
    dp.callback_query.register(process_edit_grade, lambda c: c.data.startswith("edit_grade_"))
    dp.message.register(process_edit_textbook, EditChildStates.editing_textbook_input)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞
    dp.callback_query.register(confirm_delete_child, lambda c: c.data.startswith("delete_child_"))
    dp.callback_query.register(delete_child, lambda c: c.data.startswith("confirm_delete_")) 