from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from parent_bot.keyboards import get_registration_form_keyboard, get_registration_menu_keyboard
from common.database import Parent, get_session

router = Router()

class ParentRegistration(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    waiting_for_name_surname = State()
    waiting_for_name_input = State()
    waiting_for_surname_input = State()
    waiting_for_patronymic_input = State()

async def process_start_registration(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard()
    )
    await state.set_state(ParentRegistration.waiting_for_name_surname)

async def process_edit_name(callback_query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ParentRegistration.waiting_for_name_surname.state:
        await callback_query.message.edit_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        await state.set_state(ParentRegistration.waiting_for_name_input)

async def process_edit_surname(callback_query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ParentRegistration.waiting_for_name_surname.state:
        await callback_query.message.edit_text("–ö–∞–∫–∞—è —É –≤–∞—Å —Ñ–∞–º–∏–ª–∏—è?")
        await state.set_state(ParentRegistration.waiting_for_surname_input)

async def process_edit_patronymic(callback_query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == ParentRegistration.waiting_for_name_surname.state:
        await callback_query.message.edit_text(
            "–ö–∞–∫–æ–µ —É –≤–∞—Å –æ—Ç—á–µ—Å—Ç–≤–æ? (–ï—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞", callback_data="skip_patronymic")]
            ])
        )
        await state.set_state(ParentRegistration.waiting_for_patronymic_input)

async def process_name_input(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(name=message.text)
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(name=message.text, surname=data.get("surname", ""))
    )
    await state.set_state(ParentRegistration.waiting_for_name_surname)

async def process_surname_input(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(surname=message.text)
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(name=data.get("name", ""), surname=message.text)
    )
    await state.set_state(ParentRegistration.waiting_for_name_surname)

async def process_patronymic_input(message: Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data(patronymic=message.text)
    await message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(
            name=data.get("name", ""),
            surname=data.get("surname", ""),
            patronymic=message.text
        )
    )
    await state.set_state(ParentRegistration.waiting_for_name_surname)

async def skip_patronymic(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback_query.message.edit_text(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:",
        reply_markup=get_registration_form_keyboard(
            name=data.get("name", ""),
            surname=data.get("surname", ""),
            patronymic=""
        )
    )
    await state.set_state(ParentRegistration.waiting_for_name_surname)

async def process_finish_name_surname(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("name") or not data.get("surname"):
        await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async for session in get_session():
        parent = Parent(
            telegram_id=callback_query.from_user.id,
            name=data["name"],
            surname=data["surname"],
            patronymic=data.get("patronymic"),
            phone=None  # –¢–µ–ª–µ—Ñ–æ–Ω –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        )
        session.add(parent)
        await session.commit()
    
    await callback_query.message.edit_text(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ä–µ–±–µ–Ω–∫–∞ –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É:\n"
        "1. –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è\n"
        "2. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞\n"
        "3. –ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º."
    )
    await state.clear()

def register_registration_handlers(dp):
    dp.callback_query.register(process_start_registration, lambda c: c.data == "start_registration")
    dp.callback_query.register(process_edit_name, lambda c: c.data == "edit_name")
    dp.callback_query.register(process_edit_surname, lambda c: c.data == "edit_surname")
    dp.callback_query.register(process_edit_patronymic, lambda c: c.data == "edit_patronymic")
    dp.message.register(process_name_input, ParentRegistration.waiting_for_name_input)
    dp.message.register(process_surname_input, ParentRegistration.waiting_for_surname_input)
    dp.message.register(process_patronymic_input, ParentRegistration.waiting_for_patronymic_input)
    dp.callback_query.register(process_finish_name_surname, lambda c: c.data == "finish_name_surname")
    dp.callback_query.register(skip_patronymic, lambda c: c.data == "skip_patronymic") 