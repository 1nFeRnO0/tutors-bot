from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List

from common.database import Parent, Child, Tutor, Booking, BookingStatus, FavoriteTutor, async_session_maker
from parent_bot.booking_kb import (
    get_children_keyboard,
    get_tutors_keyboard,
    get_subjects_keyboard,
    get_lesson_type_keyboard,
    create_calendar_keyboard,
    get_time_slots_keyboard,
    get_booking_confirmation_keyboard
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–π (–≤ –º–∏–Ω—É—Ç–∞—Ö)
LESSON_DURATIONS = {
    'standard': 60,
    'exam': 90
}

class BookingStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    waiting_for_child = State()
    waiting_for_tutor = State()
    waiting_for_subject = State()
    waiting_for_lesson_type = State()
    waiting_for_date = State()
    waiting_for_time = State()
    confirmation = State()

async def calculate_available_slots(
    tutor_schedule: dict,
    existing_bookings: list,
    lesson_duration: int,
    date: datetime.date
) -> List[tuple]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
    
    Args:
        tutor_schedule (dict): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        existing_bookings (list): –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        lesson_duration (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        date (datetime.date): –î–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è —Å–ª–æ—Ç—ã
    
    Returns:
        List[tuple]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [(start_time, end_time), ...]
    """
    weekday = date.strftime('%A').lower()
    if weekday not in tutor_schedule:
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    day_schedule = tutor_schedule[weekday]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ –µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if not isinstance(day_schedule, dict) or \
       not day_schedule.get('active') or \
       not day_schedule.get('start') or \
       not day_schedule.get('end'):
        return []
        
    available_slots = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    busy_slots = []
    for booking in existing_bookings:
        if booking.status == BookingStatus.APPROVED:
            busy_slots.append((booking.start_time, booking.end_time))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    busy_slots.sort(key=lambda x: x[0])
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        start_time = datetime.strptime(day_schedule['start'].strip(), '%H:%M').time()
        end_time = datetime.strptime(day_schedule['end'].strip(), '%H:%M').time()
        
        current_time = start_time
        while True:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            slot_end_time = (
                datetime.combine(date, current_time) + 
                timedelta(minutes=lesson_duration)
            ).time()
            
            # –ï—Å–ª–∏ –∫–æ–Ω–µ—Ü —Å–ª–æ—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
            if slot_end_time > end_time:
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            is_available = True
            for busy_start, busy_end in busy_slots:
                if (current_time < busy_end and 
                    slot_end_time > busy_start):
                    is_available = False
                    break
            
            if is_available:
                available_slots.append((current_time, slot_end_time))
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–∑–º–æ–∂–Ω–æ–º—É –Ω–∞—á–∞–ª—É –∑–∞–Ω—è—Ç–∏—è
            # (–∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–≥ –≤ 30 –º–∏–Ω—É—Ç)
            current_time = (
                datetime.combine(date, current_time) + 
                timedelta(minutes=30)
            ).time()
            
            if current_time >= end_time:
                break
                
    except ValueError as e:
        print(f"Error processing schedule for {weekday}: {str(e)}")
        return []
    
    return available_slots

async def is_date_available(date: datetime.date, tutor_id: int, lesson_duration: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–∞—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
    
    Args:
        date (datetime.date): –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –¥–∞—Ç–∞
        tutor_id (int): ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        lesson_duration (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –¥–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
    pass

async def show_bookings(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        parent = await session.execute(
            select(Parent)
            .options(
                selectinload(Parent.bookings)
                .selectinload(Booking.child),
                selectinload(Parent.bookings)
                .selectinload(Booking.tutor)
            )
            .where(Parent.telegram_id == callback_query.from_user.id)
        )
        parent = parent.scalar_one_or_none()
        
        if not parent or not parent.bookings:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="start_booking")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            await callback_query.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:",
                reply_markup=keyboard
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_bookings = []
        approved_bookings = []
        rejected_bookings = []
        
        for booking in sorted(parent.bookings, key=lambda b: b.date):
            if booking.status == BookingStatus.PENDING:
                pending_bookings.append(booking)
            elif booking.status == BookingStatus.APPROVED:
                approved_bookings.append(booking)
            elif booking.status == BookingStatus.REJECTED:
                rejected_bookings.append(booking)
        
        text = ""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        if pending_bookings:
            text += "‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n\n"
            for booking in pending_bookings:
                text += (
                    f"üìö {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
                f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {booking.tutor.name} {booking.tutor.surname}\n"
                f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n"
                    "-------------------\n"
                )
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {booking.date.strftime('%d.%m.%Y')} {booking.start_time.strftime('%H:%M')}",
                        callback_data=f"cancel_booking_{booking.id}"
                    )
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if approved_bookings:
            text += "\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
            for booking in approved_bookings:
                text += (
                    f"üìö {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
                    f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
                    f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {booking.tutor.name} {booking.tutor.surname}\n"
                    f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                    f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n"
                    f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {booking.approved_at.strftime('%d.%m.%Y %H:%M')}\n"
                    "-------------------\n"
                )
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {booking.date.strftime('%d.%m.%Y')} {booking.start_time.strftime('%H:%M')}",
                        callback_data=f"cancel_booking_{booking.id}"
                    )
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if rejected_bookings:
            text += "\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
            for booking in rejected_bookings:
                text += (
                    f"üìö {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
                    f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
                    f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {booking.tutor.name} {booking.tutor.surname}\n"
                    f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                    f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n"
                    f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: {booking.rejection_reason}\n"
                    "-------------------\n"
                )
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üîÑ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞",
                        callback_data=f"book_tutor_{booking.tutor.telegram_id}"
                    )
                ])
        
        if not text:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–Ω—è—Ç–∏—è."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard.extend([
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="start_booking")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if len(text) > 4096:
            parts = []
            while text:
                if len(text) > 4096:
                    part = text[:4096]
                    last_newline = part.rfind('\n')
                    if last_newline != -1:
                        parts.append(part[:last_newline])
                        text = text[last_newline + 1:]
                    else:
                        parts.append(part)
                        text = text[4096:]
                else:
                    parts.append(text)
                    break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
                    await callback_query.message.edit_text(
                        part,
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    )
                else:
                    await callback_query.message.answer(part)
        else:
            await callback_query.message.edit_text(
                text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )

async def start_booking(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–¥–∏—Ç–µ–ª–µ
        parent = await session.execute(
            select(Parent)
            .options(selectinload(Parent.children))
            .where(Parent.telegram_id == callback_query.from_user.id)
        )
        parent = parent.scalar_one_or_none()
        
        if not parent or not parent.children:
            await callback_query.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–µ–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –¥–µ—Ç–∏'.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(parent_id=parent.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç—å–º–∏
        keyboard = get_children_keyboard(parent.children)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–±–µ–Ω–∫–∞
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
        await state.set_state(BookingStates.waiting_for_child)

async def process_child_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–±–µ–Ω–∫–∞"""
    child_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ
        child = await session.execute(
            select(Child).where(Child.id == child_id)
        )
        child = child.scalar_one_or_none()
        
        if not child:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: —Ä–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–±–µ–Ω–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(child_id=child_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
        parent = await session.execute(
            select(Parent)
            .options(selectinload(Parent.favorite_tutors).selectinload(FavoriteTutor.tutor))
            .where(Parent.telegram_id == callback_query.from_user.id)
        )
        parent = parent.scalar_one_or_none()
        
        if not parent or not parent.favorite_tutors:
            await callback_query.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã'.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏
        tutors = [ft.tutor for ft in parent.favorite_tutors]
        keyboard = get_tutors_keyboard(tutors)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è {child.name}:",
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(BookingStates.waiting_for_tutor)

async def process_tutor_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    tutor_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == tutor_id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ –µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(tutor_id=tutor_id, subjects=tutor.subjects)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        subjects = tutor.subjects
        if not subjects or not any(subj.get('is_standard') or subj.get('is_exam') for subj in subjects):
            await callback_query.message.edit_text(
                "–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", callback_data="back_to_tutor_selection")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        keyboard = get_subjects_keyboard(subjects)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        state_data = await state.get_data()
        child = await session.execute(
            select(Child).where(Child.id == state_data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        subjects_info = "\n".join(
            f"üìö {subj['name']}: " + 
            ", ".join(filter(None, [
                "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ" if subj.get('is_standard') else None,
                "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É" if subj.get('is_exam') else None
            ]))
            for subj in subjects
            if subj.get('is_standard') or subj.get('is_exam')
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞
        message_text = (
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {child.name}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π:\n{subjects_info}"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(BookingStates.waiting_for_subject)

async def process_subject_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞"""
    subject_name = callback_query.data.split('_')[2]
    state_data = await state.get_data()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    subject = next(
        (subj for subj in state_data['subjects'] if subj['name'] == subject_name),
        None
    )
    
    if not subject:
        await callback_query.message.edit_text(
            "–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        subject_name=subject_name,
        subject_info=subject
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard, text = get_lesson_type_keyboard(subject)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == state_data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == state_data['tutor_id'])
        )
        tutor = tutor.scalar_one_or_none()
        
        if not child or not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üë§ –£—á–µ–Ω–∏–∫: {child.name}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n"
            f"{text}"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        await state.set_state(BookingStates.waiting_for_lesson_type)

async def process_lesson_type_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    lesson_type = callback_query.data.split('_')[-1]  # standard –∏–ª–∏ exam
    state_data = await state.get_data()
    subject_info = state_data['subject_info']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
    if (lesson_type == 'standard' and not subject_info.get('is_standard')) or \
       (lesson_type == 'exam' and not subject_info.get('is_exam')):
        await callback_query.message.edit_text(
            "–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞", callback_data="back_to_subject_selection")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")]
            ])
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –∏ –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    price = subject_info.get(f'{lesson_type}_price', 0)
    await state.update_data(
        lesson_type=lesson_type,
        lesson_duration=LESSON_DURATIONS[lesson_type],
        price=price
    )
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        child = await session.execute(
            select(Child).where(Child.id == state_data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == state_data['tutor_id'])
        )
        tutor = tutor.scalar_one_or_none()
        
        if not child or not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ —Å–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        current_date = datetime.now().date()
        available_dates = await get_available_dates(
            tutor.schedule,
            tutor.id,
            LESSON_DURATIONS[lesson_type],
            current_date,
            current_date + timedelta(days=30)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—ã –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        )
        
        if not available_dates:
            await callback_query.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ–∫—É—â–∏–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", callback_data="back_to_tutor_selection")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å
        keyboard = create_calendar_keyboard(
            current_date.year,
            current_date.month,
            available_dates
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        message_text = (
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {child.name}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {state_data['subject_name']}\n"
            f"üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {LESSON_DURATIONS[lesson_type]} –º–∏–Ω—É—Ç\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(BookingStates.waiting_for_date)

async def get_available_dates(
    tutor_schedule: dict,
    tutor_id: int,
    lesson_duration: int,
    start_date: datetime.date,
    end_date: datetime.date
) -> List[datetime.date]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏

    Args:
        tutor_schedule (dict): –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor_id (int): ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        lesson_duration (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è
        start_date (datetime.date): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        end_date (datetime.date): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞

    Returns:
        List[datetime.date]: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    """
    available_dates = []
    current_date = start_date

    async with async_session_maker() as session:
        while current_date <= end_date:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            weekday = current_date.strftime('%A').lower()  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            if weekday in tutor_schedule:
                # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
                existing_bookings = await session.execute(
                    select(Booking)
                    .where(
                        Booking.tutor_id == tutor_id,
                        Booking.date == current_date,
                        Booking.status == BookingStatus.APPROVED
                    )
                )
                existing_bookings = existing_bookings.scalars().all()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
                day_slots = await calculate_available_slots(
                    tutor_schedule,
                    existing_bookings,
                    lesson_duration,
                    current_date
                )

                if day_slots:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
                    available_dates.append(current_date)

            current_date += timedelta(days=1)

    return available_dates

async def back_to_child_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–±–µ–Ω–∫–∞"""
    async with async_session_maker() as session:
        parent = await session.execute(
            select(Parent)
            .options(selectinload(Parent.children))
            .where(Parent.telegram_id == callback_query.from_user.id)
        )
        parent = parent.scalar_one_or_none()
        
        if not parent or not parent.children:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ—Ç—å–º–∏
        keyboard = get_children_keyboard(parent.children)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–±–µ–Ω–∫–∞
        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:",
            reply_markup=keyboard
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞
        await state.set_state(BookingStates.waiting_for_child)

async def back_to_tutor_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
        parent = await session.execute(
            select(Parent)
            .options(selectinload(Parent.favorite_tutors).selectinload(FavoriteTutor.tutor))
            .where(Parent.telegram_id == callback_query.from_user.id)
        )
        parent = parent.scalar_one_or_none()
        
        if not parent or not parent.favorite_tutors:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        state_data = await state.get_data()
        child = await session.execute(
            select(Child).where(Child.id == state_data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏
        tutors = [ft.tutor for ft in parent.favorite_tutors]
        keyboard = get_tutors_keyboard(tutors)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è {child.name}:",
            reply_markup=keyboard
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        await state.set_state(BookingStates.waiting_for_tutor)

async def back_to_subject_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
    state_data = await state.get_data()
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        child = await session.execute(
            select(Child).where(Child.id == state_data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == state_data['tutor_id'])
        )
        tutor = tutor.scalar_one_or_none()
        
        if not child or not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        keyboard = get_subjects_keyboard(tutor.subjects)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        subjects_info = "\n".join(
            f"üìö {subj['name']}: " + 
            ", ".join(filter(None, [
                "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ" if subj.get('is_standard') else None,
                "–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É" if subj.get('is_exam') else None
            ]))
            for subj in tutor.subjects
            if subj.get('is_standard') or subj.get('is_exam')
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–µ–¥–º–µ—Ç–∞
        message_text = (
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {child.name}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ç–∏–ø—ã –∑–∞–Ω—è—Ç–∏–π:\n{subjects_info}"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
        await state.set_state(BookingStates.waiting_for_subject)

async def cancel_booking(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.clear()
    await callback_query.message.edit_text(
        "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

async def process_calendar_navigation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    year, month = map(int, callback_query.data.split('_')[1:])
    state_data = await state.get_data()
    
    async with async_session_maker() as session:
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == state_data['tutor_id'])
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        start_date = datetime(year, month, 1).date()
        if month == 12:
            end_date = datetime(year + 1, 1, 1).date() - timedelta(days=1)
        else:
            end_date = datetime(year, month + 1, 1).date() - timedelta(days=1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        available_dates = await get_available_dates(
            tutor.schedule,
            tutor.id,
            state_data['lesson_duration'],
            start_date,
            end_date
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å
        keyboard = create_calendar_keyboard(year, month, available_dates)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        await callback_query.message.edit_reply_markup(reply_markup=keyboard)

async def process_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    selected_date = datetime.strptime(
        callback_query.data.split('_')[-1],
        '%Y-%m-%d'
    ).date()
    
    state_data = await state.get_data()
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == state_data['tutor_id'])
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        existing_bookings = await session.execute(
            select(Booking)
            .where(
                Booking.tutor_id == tutor.id,
                Booking.date == selected_date,
                Booking.status == 'active'
            )
        )
        existing_bookings = existing_bookings.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = await calculate_available_slots(
            tutor.schedule,
            existing_bookings,
            state_data['lesson_duration'],
            selected_date
        )
        
        if not available_slots:
            await callback_query.message.edit_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        await state.update_data(selected_date=selected_date)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
        keyboard = get_time_slots_keyboard(available_slots)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        child = await session.execute(
            select(Child).where(Child.id == state_data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {child.name}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {state_data['subject_name']}\n"
            f"üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if state_data['lesson_type'] == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n"
            f"üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {state_data['lesson_duration']} –º–∏–Ω—É—Ç\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {state_data['price']} ‚ÇΩ\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        await state.set_state(BookingStates.waiting_for_time)

async def process_time_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ callback_data
    start_time_str, end_time_str = callback_query.data.split('_')[2:]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç—ã time
    start_time = datetime.strptime(start_time_str, '%H:%M').time()
    end_time = datetime.strptime(end_time_str, '%H:%M').time()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    state_data = await state.get_data()
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ, —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ –∏ –ø—Ä–µ–¥–º–µ—Ç–µ
        child = await session.execute(
            select(Child).where(Child.id == state_data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == state_data['tutor_id'])
        )
        tutor = tutor.scalar_one_or_none()
        
        if not child or not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        await state.update_data(
            start_time=start_time_str,
            end_time=end_time_str
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        message_text = (
            "üìù –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {child.name}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {state_data['subject_name']}\n"
            f"üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if state_data['lesson_type'] == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n"
            f"üìÖ –î–∞—Ç–∞: {state_data['selected_date'].strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {start_time_str} - {end_time_str}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {state_data['lesson_duration']} –º–∏–Ω—É—Ç\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {state_data['price']} ‚ÇΩ\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = get_booking_confirmation_keyboard()
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.set_state(BookingStates.confirmation)

async def confirm_booking(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    state_data = await state.get_data()
    
    async with async_session_maker() as session:
        try:
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ —Ä–µ–±–µ–Ω–∫–∞
            tutor = await session.execute(
                select(Tutor).where(Tutor.id == state_data['tutor_id'])
            )
            tutor = tutor.scalar_one_or_none()
            
            if not tutor:
                print(f"Tutor not found with ID: {state_data['tutor_id']}")
                await callback_query.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                await state.clear()
                return
            
            child = await session.execute(
                select(Child).where(Child.id == state_data['child_id'])
            )
            child = child.scalar_one_or_none()
            
            if not child:
                await callback_query.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                await state.clear()
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, –∏ —É—á–µ–Ω–∏–∫–∞
            booking = Booking(
                parent_id=state_data['parent_id'],
                child_id=state_data['child_id'],
                tutor_id=state_data['tutor_id'],
                subject_name=state_data['subject_name'],
                lesson_type=state_data['lesson_type'],
                date=state_data['selected_date'],
                start_time=datetime.strptime(state_data['start_time'], '%H:%M').time(),
                end_time=datetime.strptime(state_data['end_time'], '%H:%M').time(),
                price=state_data['price'],
                status=BookingStatus.PENDING,
                created_at=datetime.now()
            )
            
            session.add(booking)
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
            from tutor_bot.main import bot as tutor_bot
            
            notification_text = (
                "üîî –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ!\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {child.name} {child.surname}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name}\n"
                f"üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n"
                f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"approve_booking_{booking.id}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"reject_booking_{booking.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìã –í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏",
                        callback_data="tutor_pending_bookings"
                    )
                ]
            ])
            
            await tutor_bot.send_message(
                chat_id=tutor.telegram_id,
                text=notification_text,
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—é
            success_text = (
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.\n"
                "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç –∑–∞–ø–∏—Å—å.\n\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name}\n"
                f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n"
                f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await callback_query.message.edit_text(
                success_text,
                reply_markup=keyboard
            )
            
        except Exception as e:
            print(f"Error creating booking: {str(e)}")
            await callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        
        finally:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

def get_booking_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="back_to_time_selection")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")]
    ])

async def cancel_existing_booking(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏"""
    booking_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–¥–∏—Ç–µ–ª–µ
        parent = await session.execute(
            select(Parent).where(Parent.telegram_id == callback_query.from_user.id)
        )
        parent = parent.scalar_one_or_none()
        
        if not parent:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        booking = await session.execute(
            select(Booking)
            .options(
                selectinload(Booking.child),
                selectinload(Booking.tutor)
            )
            .where(
                Booking.id == booking_id,
                Booking.status.in_([BookingStatus.PENDING, BookingStatus.APPROVED])
            )
        )
        booking = booking.scalar_one_or_none()
        
        if not booking:
            await callback_query.message.edit_text(
                "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
        if booking.parent_id != parent.id:
            await callback_query.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω—ã
        message_text = (
            "‚ùóÔ∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
            f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {booking.tutor.name} {booking.tutor.surname}\n"
            f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name}\n"
            f"üìù –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}\n"
            f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
            f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {booking.price} ‚ÇΩ\n\n"
            "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å—å –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚ùå –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                callback_data=f"confirm_cancel_booking_{booking_id}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π",
                callback_data="my_bookings"
            )]
        ])
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )

async def confirm_cancel_booking(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∑–∞–ø–∏—Å–∏"""
    booking_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–¥–∏—Ç–µ–ª–µ
            parent = await session.execute(
                select(Parent).where(Parent.telegram_id == callback_query.from_user.id)
            )
            parent = parent.scalar_one_or_none()
            
            if not parent:
                await callback_query.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
            booking = await session.execute(
                select(Booking)
                .options(selectinload(Booking.tutor))
                .where(
                    Booking.id == booking_id,
                    Booking.status.in_([BookingStatus.PENDING, BookingStatus.APPROVED])
                )
            )
            booking = booking.scalar_one_or_none()
            
            if not booking:
                await callback_query.message.edit_text(
                    "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Ä–æ–¥–∏—Ç–µ–ª—é
            if booking.parent_id != parent.id:
                await callback_query.message.edit_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–º–µ–Ω—É —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            booking.status = BookingStatus.CANCELLED
            await session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–± –æ—Ç–º–µ–Ω–µ
            from tutor_bot.main import bot as tutor_bot
            notification_text = (
                "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–º\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {booking.child.name} {booking.child.surname}\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {booking.subject_name} ({'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É' if booking.lesson_type == 'exam' else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ'})\n"
                f"üìÖ –î–∞—Ç–∞: {booking.date.strftime('%d.%m.%Y')}\n"
                f"üïí –í—Ä–µ–º—è: {booking.start_time.strftime('%H:%M')} - {booking.end_time.strftime('%H:%M')}"
            )
            
            await tutor_bot.send_message(
                chat_id=booking.tutor.telegram_id,
                text=notification_text
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ
            await callback_query.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="my_bookings")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            
        except Exception as e:
            print(f"Error cancelling booking: {str(e)}")
            await callback_query.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )

async def back_to_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    tutor_id = data.get('tutor_id')
    lesson_type = data.get('lesson_type')
    lesson_duration = LESSON_DURATIONS[lesson_type]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    async with async_session_maker() as session:
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == tutor_id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor or not tutor.schedule:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
        today = datetime.now().date()
        end_date = today + timedelta(days=30)  # –ù–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
        available_dates = await get_available_dates(
            tutor.schedule,
            tutor_id,
            lesson_duration,
            today,
            end_date
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await callback_query.message.edit_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:",
            reply_markup=create_calendar_keyboard(
                today.year,
                today.month,
                available_dates
            )
        )
        await state.set_state(BookingStates.waiting_for_date)

async def back_to_lesson_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    data = await state.get_data()
    subject_info = data.get('subject_info')
    
    keyboard, text = get_lesson_type_keyboard(subject_info)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–±–µ–Ω–∫–µ –∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
    async with async_session_maker() as session:
        child = await session.execute(
            select(Child).where(Child.id == data['child_id'])
        )
        child = child.scalar_one_or_none()
        
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == data['tutor_id'])
        )
        tutor = tutor.scalar_one_or_none()
        
        if not child or not tutor:
            await callback_query.message.edit_text(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            await state.clear()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"üë§ –£—á–µ–Ω–∏–∫: {child.name}\n"
            f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor.name} {tutor.surname}\n"
            f"{text}"
        )
        
        await callback_query.message.edit_text(
            message_text,
            reply_markup=keyboard
        )
        await state.set_state(BookingStates.waiting_for_lesson_type)

def register_booking_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    dp.callback_query.register(show_bookings, lambda c: c.data == "my_bookings")
    dp.callback_query.register(start_booking, lambda c: c.data == "start_booking")
    dp.callback_query.register(process_child_selection, lambda c: c.data.startswith("book_child_"))
    dp.callback_query.register(process_tutor_selection, lambda c: c.data.startswith("book_tutor_"))
    dp.callback_query.register(process_subject_selection, lambda c: c.data.startswith("book_subject_"))
    dp.callback_query.register(process_lesson_type_selection, lambda c: c.data.startswith("book_type_"))
    dp.callback_query.register(process_calendar_navigation, lambda c: c.data.startswith("calendar_"))
    dp.callback_query.register(process_date_selection, lambda c: c.data.startswith("book_date_"))
    dp.callback_query.register(process_time_selection, lambda c: c.data.startswith("book_time_"))
    dp.callback_query.register(confirm_booking, lambda c: c.data == "confirm_booking")
    dp.callback_query.register(cancel_existing_booking, lambda c: c.data.startswith("cancel_booking_"))
    dp.callback_query.register(confirm_cancel_booking, lambda c: c.data.startswith("confirm_cancel_booking_"))
    dp.callback_query.register(back_to_child_selection, lambda c: c.data == "back_to_child_selection")
    dp.callback_query.register(back_to_tutor_selection, lambda c: c.data == "back_to_tutor_selection")
    dp.callback_query.register(back_to_subject_selection, lambda c: c.data == "back_to_subject_selection")
    dp.callback_query.register(back_to_lesson_type, lambda c: c.data == "back_to_lesson_type")
    dp.callback_query.register(back_to_date_selection, lambda c: c.data == "back_to_date_selection")
    dp.callback_query.register(cancel_booking, lambda c: c.data == "cancel_booking") 