from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from common.database import Parent, Tutor, FavoriteTutor, async_session_maker
from parent_bot.keyboards import get_tutors_list_keyboard, get_confirm_delete_tutor_keyboard

class TutorManagement(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏"""
    waiting_for_tutor_id = State()
    waiting_for_confirmation = State()

async def format_tutor_info(tutor: Tutor) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û
    tutor_name = f"{tutor.name} {tutor.surname}"
    if tutor.patronymic:
        tutor_name = f"{tutor.name} {tutor.patronymic} {tutor.surname}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    subjects_info = []
    for subject in tutor.subjects:
        subject_text = f"üìö {subject['name']}:\n"
        if subject.get('is_standard'):
            subject_text += f"   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: {subject.get('standard_price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ\n"
        if subject.get('is_exam'):
            subject_text += f"   ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É: {subject.get('exam_price', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ\n"
        subjects_info.append(subject_text)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_info = []
    day_names = {
        'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'wednesday': '–°—Ä–µ–¥–∞',
        'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'saturday': '–°—É–±–±–æ—Ç–∞',
        'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    for day, info in tutor.schedule.items():
        if info.get('active'):
            schedule_info.append(
                f"   ‚Ä¢ {day_names[day]}: {info.get('start', '')} - {info.get('end', '')}"
            )

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    return (
        f"üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n\n"
        f"üìù –û —Å–µ–±–µ:\n{tutor.description}\n\n"
        f"üìö –ü—Ä–µ–¥–º–µ—Ç—ã –∏ —Ü–µ–Ω—ã:\n"
        f"{chr(10).join(subjects_info)}\n"
        f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        f"{chr(10).join(schedule_info) if schedule_info else '   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
    )

async def show_tutors_list(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    async with async_session_maker() as session:
        async with session.begin():
            parent = await session.execute(
                select(Parent)
                .options(selectinload(Parent.favorite_tutors).selectinload(FavoriteTutor.tutor))
                .where(Parent.telegram_id == callback_query.from_user.id)
            )
            parent = parent.scalar_one_or_none()
            
            if not parent:
                await callback_query.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            tutors = [ft.tutor for ft in parent.favorite_tutors]
            
            if not tutors:
                text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:"
            else:
                text = "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤:"
            
            await callback_query.message.edit_text(
                text,
                reply_markup=get_tutors_list_keyboard(tutors)
            )

async def show_tutor_info(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ"""
    tutor_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == tutor_id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await callback_query.message.edit_text(
                "‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="tutors")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
        text = await format_tutor_info(tutor)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"book_tutor_{tutor.id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="tutors")],
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )

async def start_add_tutor(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞:"
    )
    await state.set_state(TutorManagement.waiting_for_tutor_id)

async def process_tutor_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ Telegram ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    try:
        tutor_telegram_id = int(message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="tutors")]
            ])
        )
        return
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor = await session.execute(
            select(Tutor).where(Tutor.telegram_id == tutor_telegram_id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if not tutor:
            await message.answer(
                "‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="tutors")]
                ])
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è
        parent = await session.execute(
            select(Parent).where(Parent.telegram_id == message.from_user.id)
        )
        parent = parent.scalar_one_or_none()
        
        if not parent:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä
        existing = await session.execute(
            select(FavoriteTutor).where(
                FavoriteTutor.parent_id == parent.id,
                FavoriteTutor.tutor_id == tutor.id
            )
        )
        if existing.scalar_one_or_none():
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="tutors")]
                ])
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(tutor_id=tutor.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = await format_tutor_info(tutor)
        text += "\n\n–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫?"
        
        keyboard = [
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å", callback_data="confirm_add_tutor"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_add_tutor")
            ]
        ]
        
        await message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.set_state(TutorManagement.waiting_for_confirmation)

async def confirm_add_tutor(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    data = await state.get_data()
    tutor_id = data.get('tutor_id')
    
    if not tutor_id:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="tutors")]
            ])
        )
        await state.clear()
        return
    
    async with async_session_maker() as session:
        async with session.begin():
            parent = await session.execute(
                select(Parent).where(Parent.telegram_id == callback_query.from_user.id)
            )
            parent = parent.scalar_one_or_none()
            
            if not parent:
                await callback_query.message.edit_text("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                await state.clear()
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            favorite = FavoriteTutor(parent_id=parent.id, tutor_id=tutor_id)
            session.add(favorite)
    
    await callback_query.message.edit_text(
        "‚úÖ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤", callback_data="tutors")]
        ])
    )
    await state.clear()

async def cancel_add_tutor(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    await state.clear()
    await callback_query.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="tutors")]
        ])
    )

async def confirm_delete_tutor(callback_query: types.CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    tutor_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        tutor = await session.execute(
            select(Tutor).where(Tutor.id == tutor_id)
        )
        tutor = tutor.scalar_one_or_none()
        
        if tutor:
            tutor_name = f"{tutor.name} {tutor.surname}"
            if tutor.patronymic:
                tutor_name = f"{tutor.name} {tutor.patronymic} {tutor.surname}"
            
            await callback_query.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_name} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?",
                reply_markup=get_confirm_delete_tutor_keyboard(tutor_id)
            )

async def delete_tutor(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    tutor_id = int(callback_query.data.split('_')[-1])
    
    async with async_session_maker() as session:
        async with session.begin():
            parent = await session.execute(
                select(Parent).where(Parent.telegram_id == callback_query.from_user.id)
            )
            parent = parent.scalar_one_or_none()
            
            if parent:
                favorite = await session.execute(
                    select(FavoriteTutor).where(
                        FavoriteTutor.parent_id == parent.id,
                        FavoriteTutor.tutor_id == tutor_id
                    )
                )
                favorite = favorite.scalar_one_or_none()
                
                if favorite:
                    await session.delete(favorite)
    
    await callback_query.answer("–†–µ–ø–µ—Ç–∏—Ç–æ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    await show_tutors_list(callback_query)

def register_tutors_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏"""
    dp.callback_query.register(show_tutors_list, lambda c: c.data == "tutors")
    dp.callback_query.register(show_tutor_info, lambda c: c.data.startswith("favorite_tutor_info_"))
    dp.callback_query.register(start_add_tutor, lambda c: c.data == "add_tutor")
    dp.message.register(process_tutor_id, TutorManagement.waiting_for_tutor_id)
    dp.callback_query.register(confirm_add_tutor, lambda c: c.data == "confirm_add_tutor", TutorManagement.waiting_for_confirmation)
    dp.callback_query.register(cancel_add_tutor, lambda c: c.data == "cancel_add_tutor", TutorManagement.waiting_for_confirmation)
    dp.callback_query.register(confirm_delete_tutor, lambda c: c.data.startswith("favorite_delete_tutor_"))
    dp.callback_query.register(delete_tutor, lambda c: c.data.startswith("favorite_confirm_delete_tutor_")) 